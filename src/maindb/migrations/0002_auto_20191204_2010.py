# -*- coding: utf-8 -*-
# Generated by Django 1.11.13 on 2019-12-04 20:10
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion
import helpers.director.model_func.cus_fields.cus_decimal
import maindb.create_user
import maindb.cus_models_fields


class Migration(migrations.Migration):

    dependencies = [
        ('maindb', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='TbActivityRecord',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('bid', models.BigIntegerField(db_column='BId')),
                ('createtime', models.DateTimeField(db_column='CreateTime', verbose_name='生成时间')),
                ('amount', models.DecimalField(db_column='Amount', decimal_places=4, max_digits=38, verbose_name='金额')),
                ('turnover', models.DecimalField(db_column='Turnover', decimal_places=4, max_digits=38, verbose_name='流水')),
                ('bonus', models.DecimalField(db_column='Bonus', decimal_places=4, max_digits=38, verbose_name='奖金')),
                ('state', models.IntegerField(choices=[(0, '正在进行'), (1, '已完成'), (2, '已发放'), (3, '已失效')], db_column='State', verbose_name='状态')),
            ],
            options={
                'db_table': 'TB_Activity_Record',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbActivitySettings',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('friendlyname', models.CharField(db_column='FriendlyName', max_length=64, verbose_name='名称')),
                ('key', models.CharField(db_column='Key', max_length=64, verbose_name='键')),
                ('value', models.CharField(db_column='Value', max_length=1024, verbose_name='值')),
                ('description', models.CharField(blank=True, db_column='Description', max_length=1024, null=True, verbose_name='描述')),
            ],
            options={
                'db_table': 'TB_Activity_Settings',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbActivityTemplate',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('title', models.CharField(db_column='Title', max_length=128)),
                ('assembly', models.CharField(db_column='Assembly', max_length=128)),
                ('typefullname', models.CharField(db_column='TypeFullName', max_length=128)),
                ('remark', models.CharField(blank=True, db_column='Remark', max_length=255, null=True)),
                ('enabled', models.BooleanField(db_column='Enabled')),
            ],
            options={
                'db_table': 'TB_Activity_Template',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbActivityV2',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('title', models.CharField(db_column='Title', max_length=128, verbose_name='大标题')),
                ('subtitle', models.CharField(blank=True, db_column='SubTitle', max_length=128, null=True, verbose_name='小标题')),
                ('timedesp', models.CharField(blank=True, db_column='TimeDesp', help_text='显示在活动页面中', max_length=256, null=True, verbose_name='时间描述')),
                ('begintime', models.DateTimeField(db_column='BeginTime', help_text='只是被service使用，不会显示在活动页面中', verbose_name='开始时间')),
                ('endtime', models.DateTimeField(db_column='EndTime', help_text='只是被service使用，不会显示在活动页面中', verbose_name='结束时间')),
                ('displaytype', models.IntegerField(choices=[(0, '对外'), (1, '对内')], db_column='DisplayType', default=0, verbose_name='对内/对外')),
                ('target', models.CharField(blank=True, db_column='Target', max_length=256, null=True, verbose_name='活动对象')),
                ('content', models.CharField(blank=True, db_column='Content', max_length=2048, null=True, verbose_name='活动详情')),
                ('rules', models.CharField(db_column='Rules', max_length=3000, verbose_name='规则')),
                ('banner', maindb.cus_models_fields.CusPictureField(blank=True, db_column='Banner', max_length=512, null=True, verbose_name='列表封面')),
                ('url', models.CharField(db_column='Url', max_length=512)),
                ('componentname', models.CharField(blank=True, choices=[('com-shouchun', '首存再存')], db_column='ComponentName', help_text='注意首存再存等活动，必须选择对应的前端组件', max_length=64, null=True, verbose_name='前端组件名')),
                ('componentparams', models.CharField(blank=True, db_column='ComponentParams', max_length=4000, null=True, verbose_name='前端组件参数')),
                ('templateid', models.IntegerField(db_column='TemplateId', default=0, verbose_name='程序集')),
                ('ismutex', models.BooleanField(db_column='IsMutex', verbose_name='与其他活动互斥')),
                ('sort', models.IntegerField(db_column='Sort', verbose_name='排序')),
                ('createtime', models.DateTimeField(auto_now_add=True, db_column='CreateTime', verbose_name='创建时间')),
                ('edittime', models.DateTimeField(auto_now=True, db_column='EditTime', verbose_name='更新时间')),
                ('creatorid', maindb.create_user.CreateUserField(db_column='CreatorId', verbose_name='创建者')),
                ('editorid', maindb.create_user.UpdateUserField(db_column='EditorId', verbose_name='修改人')),
                ('remark', models.CharField(blank=True, db_column='Remark', max_length=1024, null=True, verbose_name='活动备注')),
                ('enabled', models.BooleanField(db_column='Enabled', verbose_name='启用')),
                ('image', maindb.cus_models_fields.CusPictureField(blank=True, db_column='Image', max_length=512, null=True, verbose_name='首页弹出图')),
            ],
            options={
                'db_table': 'TB_Activity_V2',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbAdjusttemplate',
            fields=[
                ('templateid', models.AutoField(db_column='TemplateID', primary_key=True, serialize=False, verbose_name='模板ID')),
                ('templatename', models.CharField(db_column='TemplateName', max_length=200, null=True, verbose_name='模板名')),
                ('adjustsettings', models.CharField(db_column='AdjustSettings', max_length=3000, null=True, verbose_name='调水设置')),
                ('minlimit', models.DecimalField(db_column='MinLimit', decimal_places=4, max_digits=18, verbose_name='最小限制')),
                ('maxlimit', models.DecimalField(db_column='MaxLimit', decimal_places=4, max_digits=18, verbose_name='最大限制')),
                ('operateuser', maindb.create_user.UpdateUserField(blank=True, db_column='OperateUserNo', null=True, verbose_name='操作人')),
                ('operatetime', models.DateTimeField(auto_now=True, db_column='OperateTime', null=True, verbose_name='操作时间')),
                ('status', models.IntegerField(choices=[(0, '失效'), (1, '启用')], db_column='Status', default=1, verbose_name='状态')),
                ('remark', models.CharField(blank=True, db_column='Remark', max_length=200, null=True, verbose_name='备注')),
            ],
            options={
                'db_table': 'TB_AdjustTemplate',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbAdvertisement',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('image', maindb.cus_models_fields.CusPictureField(db_column='Image', max_length=255, verbose_name='图片地址')),
                ('target', models.CharField(blank=True, db_column='Target', max_length=255, verbose_name='跳转地址')),
                ('durationseconds', models.IntegerField(db_column='DurationSeconds', verbose_name='持续时间')),
                ('enabled', models.BooleanField(db_column='Enabled', default=True, verbose_name='启用')),
            ],
            options={
                'db_table': 'TB_Advertisement',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbAgaccount',
            fields=[
                ('accountid', models.ForeignKey(db_column='AccountId', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='maindb.TbAccount', verbose_name='账号')),
                ('agusername', models.CharField(db_column='AGUserName', max_length=150, verbose_name='AG用户名')),
                ('bonusrate', models.DecimalField(blank=True, db_column='BonusRate', decimal_places=4, max_digits=18, null=True, verbose_name='反点率')),
                ('transferin', models.DecimalField(blank=True, db_column='TransferIn', decimal_places=4, max_digits=18, null=True, verbose_name='转入')),
                ('transferout', models.DecimalField(blank=True, db_column='TransferOut', decimal_places=4, max_digits=18, null=True, verbose_name='转出')),
                ('winorloss', models.DecimalField(blank=True, db_column='WinOrLoss', decimal_places=4, max_digits=18, null=True, verbose_name='亏盈')),
                ('rebate', models.DecimalField(blank=True, db_column='Rebate', decimal_places=4, max_digits=18, null=True, verbose_name='总反水')),
                ('availablescores', models.DecimalField(blank=True, db_column='AvailableScores', decimal_places=4, max_digits=18, null=True, verbose_name='余额')),
                ('fishavailablescores', models.DecimalField(blank=True, db_column='FishAvailableScores', decimal_places=4, max_digits=18, null=True)),
                ('lastfishupdatetime', models.DateTimeField(blank=True, db_column='LastFishUpdateTime', null=True, verbose_name='')),
                ('lastagupdatetime', models.DateTimeField(blank=True, db_column='LastAgUpdateTime', null=True, verbose_name='更新时间')),
                ('fundswitch', models.BooleanField(db_column='FundSwitch', verbose_name='资金开关')),
            ],
            options={
                'db_table': 'TB_AgAccount',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbAgentcommission',
            fields=[
                ('commid', models.BigAutoField(db_column='CommID', primary_key=True, serialize=False, verbose_name='记录ID')),
                ('agent', models.BigIntegerField(db_column='Agent')),
                ('amount', helpers.director.model_func.cus_fields.cus_decimal.CusDecimalField(blank=True, db_column='Amount', decimal_places=4, max_digits=18, null=True, verbose_name='佣金')),
                ('daus', models.IntegerField(blank=True, db_column='DAUs', null=True, verbose_name='活跃用户数')),
                ('lostamount', helpers.director.model_func.cus_fields.cus_decimal.CusDecimalField(blank=True, db_column='LostAmount', decimal_places=4, max_digits=18, null=True, verbose_name='本月净盈利')),
                ('balancelostamount', helpers.director.model_func.cus_fields.cus_decimal.CusDecimalField(blank=True, db_column='BalanceLostAmount', decimal_places=4, max_digits=18, null=True, verbose_name='累计净盈利')),
                ('percentage', models.DecimalField(blank=True, db_column='Percentage', decimal_places=2, max_digits=18, null=True, verbose_name='佣金比例')),
                ('settleyear', models.IntegerField(blank=True, db_column='SettleYear', null=True, verbose_name='结算年')),
                ('settlemonth', models.IntegerField(blank=True, db_column='SettleMonth', null=True, verbose_name='结算月')),
                ('settledate', models.CharField(blank=True, db_column='SettleDate', max_length=10, null=True, verbose_name='结算日期')),
                ('creater', models.CharField(blank=True, db_column='Creater', max_length=100, null=True)),
                ('createtime', models.DateTimeField(blank=True, db_column='CreateTime', null=True, verbose_name='创建时间')),
                ('updater', models.CharField(blank=True, db_column='Updater', max_length=100, null=True)),
                ('updatetime', models.DateTimeField(blank=True, db_column='UpdateTime', null=True)),
                ('applytime', models.DateTimeField(blank=True, db_column='ApplyTime', null=True, verbose_name='审核时间')),
                ('status', models.IntegerField(blank=True, choices=[(0, '未审核'), (1, '审核中'), (2, '已发放')], db_column='Status', default=0, null=True)),
                ('description', models.CharField(blank=True, db_column='Description', max_length=500, null=True)),
                ('betamount', helpers.director.model_func.cus_fields.cus_decimal.CusDecimalField(blank=True, db_column='BetAmount', decimal_places=4, max_digits=18, null=True, verbose_name='投注金额')),
                ('bonusamount', helpers.director.model_func.cus_fields.cus_decimal.CusDecimalField(blank=True, db_column='BonusAmount', decimal_places=4, max_digits=18, null=True, verbose_name='返水')),
                ('expendamount', helpers.director.model_func.cus_fields.cus_decimal.CusDecimalField(blank=True, db_column='ExpendAmount', decimal_places=4, max_digits=18, null=True, verbose_name='系统红利')),
                ('rechargeamount', helpers.director.model_func.cus_fields.cus_decimal.CusDecimalField(blank=True, db_column='RechargeAmount', decimal_places=4, max_digits=18, null=True, verbose_name='充值金额')),
                ('withdrawalamount', helpers.director.model_func.cus_fields.cus_decimal.CusDecimalField(blank=True, db_column='WithdrawalAmount', decimal_places=4, max_digits=18, null=True, verbose_name='提现金额')),
            ],
            options={
                'db_table': 'TB_AgentCommission',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbAgentleavemsg',
            fields=[
                ('msgid', models.BigAutoField(db_column='MsgID', primary_key=True, serialize=False)),
                ('msg', models.CharField(blank=True, db_column='Msg', max_length=3000, null=True, verbose_name='内容')),
                ('answer', models.CharField(blank=True, db_column='Answer', max_length=3000, null=True, verbose_name='回复内容')),
                ('isanswer', models.NullBooleanField(db_column='IsAnswer', verbose_name='是否回复')),
                ('createtime', models.DateTimeField(blank=True, db_column='CreateTime', null=True, verbose_name='创建时间')),
                ('title', models.CharField(blank=True, db_column='Title', max_length=3000, null=True, verbose_name='标题')),
            ],
            options={
                'db_table': 'TB_AgentLeaveMsg',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbAgentnotice',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('title', models.CharField(db_column='Title', max_length=1024, null=True, verbose_name='标题')),
                ('url', models.CharField(blank=True, db_column='Url', max_length=512, null=True, verbose_name='链接Url')),
                ('createtime', models.DateTimeField(auto_now=True, db_column='CreateTime', verbose_name='创建时间')),
                ('createuser', maindb.create_user.CreateUserField(blank=True, db_column='CreateUser', null=True, verbose_name='创建人')),
                ('status', models.IntegerField(choices=[(1, '启用'), (0, '离线')], db_column='Status', default=1, null=True)),
                ('content', models.TextField(blank=True, db_column='Content', default='', null=True, verbose_name='内容')),
            ],
            options={
                'db_table': 'TB_AgentNotice',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbAgentqa',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('title', models.CharField(blank=True, db_column='Title', max_length=1024, null=True, verbose_name='标题')),
                ('createtime', models.DateTimeField(auto_now_add=True, db_column='CreateTime', verbose_name='创建时间')),
                ('createuser', maindb.create_user.CreateUserField(blank=True, db_column='CreateUser', null=True, verbose_name='创建人')),
                ('status', models.IntegerField(blank=True, choices=[(1, '启用'), (0, '离线')], db_column='Status', default=1, null=True, verbose_name='状态')),
                ('sort', models.IntegerField(blank=True, db_column='Sort', default=0, null=True, verbose_name='排序')),
                ('content', models.TextField(blank=True, db_column='Content', null=True, verbose_name='内容')),
            ],
            options={
                'db_table': 'TB_AgentQA',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbAgentrules',
            fields=[
                ('agentruleid', models.AutoField(db_column='AgentRuleID', primary_key=True, serialize=False)),
                ('accountid', models.IntegerField(db_column='AccountID')),
                ('sportid', models.IntegerField(blank=True, db_column='SportID', null=True)),
                ('daus', models.IntegerField(blank=True, db_column='DAUs', null=True)),
                ('minamount', models.DecimalField(blank=True, db_column='MinAmount', decimal_places=4, max_digits=18, null=True)),
                ('maxamount', models.DecimalField(blank=True, db_column='MaxAmount', decimal_places=4, max_digits=18, null=True)),
                ('percentage', models.DecimalField(blank=True, db_column='Percentage', decimal_places=2, max_digits=18, null=True)),
                ('status', models.IntegerField(blank=True, db_column='Status', null=True)),
                ('createtime', models.DateTimeField(blank=True, db_column='CreateTime', null=True)),
            ],
            options={
                'db_table': 'TB_AgentRules',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbAgprofitloss',
            fields=[
                ('profitlossid', models.AutoField(db_column='ProfitLossID', primary_key=True, serialize=False, verbose_name='记录ID')),
                ('profitlosstime', models.DateTimeField(blank=True, db_column='ProfitLossTime', null=True, verbose_name='游戏时间')),
                ('profitlosstype', models.CharField(blank=True, db_column='ProfitLossType', max_length=50, null=True, verbose_name='')),
                ('profitlossmoney', models.DecimalField(blank=True, db_column='ProfitLossMoney', decimal_places=4, max_digits=18, null=True, verbose_name='投注额')),
                ('prizemoney', models.DecimalField(blank=True, db_column='PrizeMoney', decimal_places=4, max_digits=18, null=True, verbose_name='派奖额')),
                ('winmoney', models.DecimalField(blank=True, db_column='WinMoney', decimal_places=4, max_digits=18, null=True, verbose_name='亏盈')),
                ('memo', models.CharField(blank=True, db_column='Memo', max_length=500, null=True, verbose_name='描述')),
                ('playid', models.CharField(blank=True, db_column='PlayID', max_length=50, null=True, verbose_name='AG游戏ID')),
                ('gametype', models.CharField(blank=True, db_column='GameType', max_length=50, null=True, verbose_name='游戏类型')),
                ('refid', models.IntegerField(blank=True, db_column='RefID', null=True, verbose_name='')),
                ('savetime', models.DateTimeField(blank=True, db_column='SaveTime', null=True, verbose_name='数据保存时间')),
                ('parentid', models.IntegerField(blank=True, db_column='ParentID', null=True)),
                ('bettime', models.DateTimeField(blank=True, db_column='BetTime', null=True)),
                ('iswin', models.IntegerField(blank=True, db_column='IsWin', null=True, verbose_name='赢')),
                ('username', models.CharField(blank=True, db_column='UserName', max_length=50, null=True, verbose_name='AG用户名')),
                ('validbetamount', models.DecimalField(db_column='ValidBetAmount', decimal_places=4, max_digits=18, verbose_name='有效流水')),
                ('rebate', models.DecimalField(db_column='Rebate', decimal_places=4, max_digits=18, verbose_name='返点金额')),
            ],
            options={
                'db_table': 'TB_AgProfitLoss',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbAreablacklist',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False, verbose_name='编号')),
                ('status', models.IntegerField(db_column='Status', default=1)),
                ('area', models.CharField(db_column='Area', max_length=200, verbose_name='地区')),
            ],
            options={
                'db_table': 'TB_AreaBlackList',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbBackendloginlog',
            fields=[
                ('id', models.BigAutoField(db_column='Id', primary_key=True, serialize=False)),
                ('userid', models.IntegerField(db_column='UserId', verbose_name='管理员ID')),
                ('username', models.CharField(db_column='UserName', max_length=50, verbose_name='管理员')),
                ('ipaddress', models.CharField(db_column='IPAddress', max_length=20, verbose_name='ip地址')),
                ('area', models.CharField(blank=True, db_column='Area', max_length=200, null=True, verbose_name='区域')),
                ('createtime', models.DateTimeField(auto_now_add=True, db_column='CreateTime', verbose_name='登录时间')),
            ],
            options={
                'db_table': 'TB_BackendLoginLog',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbBackendwhiteip',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('startip', models.CharField(db_column='StartIp', max_length=16, null=True, verbose_name='开始IP')),
                ('startipnum', models.BigIntegerField(blank=True, db_column='StartIpNum', null=True)),
                ('endip', models.CharField(db_column='EndIp', max_length=16, null=True, verbose_name='结束IP')),
                ('endipnum', models.BigIntegerField(blank=True, db_column='EndIpNum', null=True)),
                ('iswork', models.BooleanField(db_column='IsWork', verbose_name='启用')),
                ('type', models.IntegerField(blank=True, db_column='Type', null=True)),
            ],
            options={
                'db_table': 'TB_BackendWhiteIP',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbBankcard',
            fields=[
                ('bankcardid', models.AutoField(db_column='BankCardId', primary_key=True, serialize=False, verbose_name='卡ID')),
                ('account', models.CharField(db_column='Account', max_length=50)),
                ('banktypeid', models.IntegerField(db_column='BankTypeID')),
                ('cardno', models.CharField(db_column='CardNo', max_length=50, verbose_name='卡号')),
                ('bankaccountname', models.CharField(db_column='BankAccountName', max_length=50, verbose_name='开户人')),
                ('bankaccountmobil', models.CharField(db_column='BankAccountMobil', max_length=50, verbose_name='银行预留手机号')),
                ('bankcity', models.CharField(db_column='BankCity', max_length=50, verbose_name='城市')),
                ('banktypename', models.CharField(db_column='BankTypeName', max_length=150, verbose_name='银行卡类型')),
                ('bankprovince', models.CharField(db_column='BankProvince', max_length=150, verbose_name='省份')),
                ('banksitename', models.CharField(db_column='BankSiteName', max_length=250, verbose_name='支行名称')),
                ('createtime', models.DateTimeField(auto_now=True, db_column='CreateTime', verbose_name='创建时间')),
                ('active', models.BooleanField(db_column='Active', verbose_name='激活')),
            ],
            options={
                'db_table': 'TB_BankCard',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbBanktypes',
            fields=[
                ('banktypeid', models.AutoField(db_column='BankTypeID', primary_key=True, serialize=False, verbose_name='编号')),
                ('banktypename', models.CharField(db_column='BankTypeName', max_length=50, unique=True, verbose_name='银行卡类型')),
                ('active', models.BooleanField(db_column='Active', default=True)),
                ('img', maindb.cus_models_fields.CusPictureField(blank=True, db_column='Img', max_length=200, null=True)),
                ('sort', models.IntegerField(db_column='Sort', verbose_name='排序')),
                ('bgimg', maindb.cus_models_fields.CusPictureField(blank=True, db_column='BgImg', max_length=200, null=True, verbose_name='背景图')),
            ],
            options={
                'db_table': 'TB_BankTypes',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbBetfullrecord',
            fields=[
                ('tid', models.AutoField(db_column='Tid', primary_key=True, serialize=False)),
                ('rfid', models.BigIntegerField(blank=True, db_column='RfID', null=True)),
                ('rftype', models.IntegerField(choices=[(1, '充值'), (2, '后台调整'), (3, '活动赠送')], db_column='RfType', verbose_name='类型')),
                ('consumeamount', models.DecimalField(db_column='ConsumeAmount', decimal_places=4, max_digits=18, verbose_name='剩余限额')),
                ('consumestatus', models.IntegerField(choices=[(1, '等待消耗'), (2, '消耗完毕')], db_column='ConsumeStatus', verbose_name='消费状态')),
                ('content', models.CharField(blank=True, db_column='Content', max_length=150, null=True, verbose_name='详细说明')),
                ('createtime', models.DateTimeField(auto_now=True, db_column='CreateTime', null=True, verbose_name='创建时间')),
                ('amount', models.DecimalField(db_column='Amount', decimal_places=4, max_digits=18, verbose_name='原始限额')),
                ('fundtype', models.IntegerField(db_column='FundType', default=0)),
            ],
            options={
                'db_table': 'TB_BetFullRecord',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbBonuslog',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('amount', models.DecimalField(db_column='Amount', decimal_places=4, max_digits=18, verbose_name='金额')),
                ('withdrawlimitamount', models.DecimalField(db_column='WithdrawLimitAmount', decimal_places=4, max_digits=18, verbose_name='提款限额增加')),
                ('createuser', maindb.create_user.CreateUserField(blank=True, db_column='CreateUser', null=True, verbose_name='操作人')),
                ('createtime', models.DateTimeField(auto_now_add=True, db_column='CreateTime', verbose_name='时间')),
                ('memo', models.CharField(blank=True, db_column='Memo', max_length=100, null=True, verbose_name='备注')),
            ],
            options={
                'db_table': 'TB_BonusLog',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbBonustype',
            fields=[
                ('bonustypeid', models.AutoField(db_column='BonusTypeID', primary_key=True, serialize=False, verbose_name='红利ID')),
                ('bonustypename', models.CharField(db_column='BonusTypeName', max_length=50, verbose_name='红利名称')),
                ('withdrawlimitmultiple', models.DecimalField(db_column='WithdrawLimitMultiple', decimal_places=4, max_digits=18, verbose_name='倍数')),
                ('createuser', maindb.create_user.CreateUserField(blank=True, db_column='CreateUser', null=True, verbose_name='创建人')),
                ('createtime', models.DateTimeField(auto_now_add=True, db_column='CreateTime', verbose_name='创建时间')),
            ],
            options={
                'db_table': 'TB_BonusType',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbDomain',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('url', models.CharField(db_column='Url', max_length=255, verbose_name='域名')),
                ('status', models.IntegerField(choices=[(0, '失效'), (1, '启用')], db_column='Status', default=1, verbose_name='状态')),
            ],
            options={
                'db_table': 'TB_Domain',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbGamemoneyininfo',
            fields=[
                ('moneyinid', models.AutoField(db_column='MoneyInID', primary_key=True, serialize=False, verbose_name='记录ID')),
                ('amount', models.DecimalField(blank=True, db_column='Amount', decimal_places=4, max_digits=18, null=True, verbose_name='金额')),
                ('orderid', models.CharField(blank=True, db_column='OrderID', max_length=50, null=True, verbose_name='订单号')),
                ('ordertime', models.DateTimeField(blank=True, db_column='OrderTime', null=True, verbose_name='时间')),
                ('handle', models.CharField(blank=True, db_column='Handle', max_length=50, null=True, verbose_name='操作者')),
                ('handtime', models.DateTimeField(blank=True, db_column='HandTime', null=True, verbose_name='操作时间')),
                ('username', models.CharField(blank=True, db_column='UserName', max_length=50, null=True, verbose_name='用户名')),
                ('status', models.IntegerField(blank=True, choices=[(0, '等待转入'), (1, '正在转入'), (2, '转入完成'), (3, '转入失败'), (4, '转入失败,已退款')], db_column='Status', null=True, verbose_name='状态')),
                ('memo', models.CharField(blank=True, db_column='Memo', max_length=2000, null=True, verbose_name='备注')),
            ],
            options={
                'db_table': 'TB_GameMoneyInInfo',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbGamemoneyoutinfo',
            fields=[
                ('moneyoutid', models.AutoField(db_column='MoneyOutID', primary_key=True, serialize=False, verbose_name='记录ID')),
                ('amount', models.DecimalField(blank=True, db_column='Amount', decimal_places=4, max_digits=18, null=True, verbose_name='金额')),
                ('orderid', models.CharField(blank=True, db_column='OrderID', max_length=50, null=True, verbose_name='订单号')),
                ('ordertime', models.DateTimeField(blank=True, db_column='OrderTime', null=True, verbose_name='时间')),
                ('username', models.CharField(blank=True, db_column='UserName', max_length=50, null=True, verbose_name='AG用户名')),
                ('handle', models.CharField(blank=True, db_column='Handle', max_length=50, null=True, verbose_name='操作者')),
                ('handtime', models.DateTimeField(blank=True, db_column='HandTime', null=True, verbose_name='操作时间')),
                ('status', models.IntegerField(blank=True, choices=[(0, '等待处理'), (1, '正在收回'), (2, '收回完成'), (4, '收回失败')], db_column='Status', null=True, verbose_name='状态')),
                ('memo', models.CharField(blank=True, db_column='Memo', max_length=2000, null=True, verbose_name='备注')),
            ],
            options={
                'db_table': 'TB_GameMoneyOutInfo',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbLeagueGroup',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('groupname', models.CharField(db_column='GroupName', max_length=50, verbose_name='分组名')),
                ('enabled', models.SmallIntegerField(blank=True, db_column='Enabled', default=1, verbose_name='启用')),
                ('riskleveldelay', models.CharField(db_column='RiskLevelDelay', max_length=3000, verbose_name='风控等级延迟')),
                ('minodds', models.DecimalField(db_column='MinOdds', decimal_places=2, help_text='上下盘玩法非主盘口封盘最低赔率', max_digits=18, verbose_name='最小赔率')),
                ('handicapcount', models.IntegerField(db_column='HandicapCount', verbose_name='走地盘口显示数量')),
                ('ticketdelay', models.IntegerField(db_column='TicketDelay', verbose_name='注单延时')),
                ('weight', models.DecimalField(db_column='Weight', decimal_places=4, max_digits=18, verbose_name='权重')),
                ('reopenmarketsdelay', models.IntegerField(db_column='ReOpenMarketsDelay', default=0, help_text='单位秒', verbose_name='进球后延迟开盘时间')),
            ],
            options={
                'db_table': 'TB_League_Group',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbLeaguegroupMarketweight',
            fields=[
                ('tid', models.AutoField(db_column='TID', primary_key=True, serialize=False)),
                ('preweight', models.DecimalField(db_column='PreWeight', decimal_places=4, max_digits=18, verbose_name='早盘权重')),
                ('liveweight', models.DecimalField(db_column='LiveWeight', decimal_places=4, max_digits=18, verbose_name='走地权重')),
                ('extendweight', models.DecimalField(db_column='ExtendWeight', decimal_places=2, default=1, max_digits=18, verbose_name='扩展权重')),
            ],
            options={
                'db_table': 'TB_LeagueGroup_MarketWeight',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbLeagueGroupSpread',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('groupid', models.IntegerField(db_column='GroupId')),
                ('bettype', models.IntegerField(db_column='BetType')),
                ('periodtype', models.IntegerField(db_column='PeriodType')),
                ('spread', models.DecimalField(blank=True, db_column='Spread', decimal_places=3, max_digits=18, null=True)),
            ],
            options={
                'db_table': 'TB_League_Group_Spread',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbLeagueidInGroup',
            fields=[
                ('groupid', models.IntegerField(db_column='GroupId')),
                ('leagueid', models.IntegerField(db_column='LeagueId', primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'TB_LeagueId_In_Group',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbLimit',
            fields=[
                ('tid', models.BigAutoField(db_column='Tid', primary_key=True, serialize=False)),
                ('limittype', models.IntegerField(choices=[(11, '赛事整场'), (12, '赛事玩法'), (13, '赛事用户等级'), (21, '用户整场'), (22, '用户玩法')], db_column='LimitType', default=11, verbose_name='玩法控制')),
                ('relationno', models.IntegerField(blank=True, db_column='RelationNo', default=0, verbose_name='玩法/等级')),
                ('maxsinglepayout', models.DecimalField(db_column='MaxSinglePayout', decimal_places=2, default=0, max_digits=18, null=True, verbose_name='最大赔付值')),
                ('status', models.IntegerField(blank=True, db_column='Status', default=1, null=True, verbose_name='启用')),
                ('description', models.CharField(blank=True, db_column='Description', max_length=500, null=True)),
                ('createtime', models.DateTimeField(auto_now_add=True, db_column='CreateTime', null=True)),
                ('updatetime', models.DateTimeField(auto_now=True, db_column='UpdateTime', null=True)),
            ],
            options={
                'db_table': 'TB_Limit',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbLimitusergroup',
            fields=[
                ('groupid', models.IntegerField(db_column='GroupID', primary_key=True, serialize=False, verbose_name='分组ID')),
                ('groupname', models.CharField(db_column='GroupName', max_length=200, verbose_name='分组名')),
                ('betbase', models.DecimalField(db_column='BetBase', decimal_places=4, max_digits=18, verbose_name='限额基数')),
                ('singleweight', models.DecimalField(db_column='SingleWeight', decimal_places=4, max_digits=18, verbose_name='单注权重系数')),
                ('betmatch', models.DecimalField(db_column='BetMatch', decimal_places=4, max_digits=18, verbose_name='单场限额系数')),
                ('enable', models.BooleanField(db_column='Enable', verbose_name='启用')),
                ('description', models.CharField(blank=True, db_column='Description', max_length=200, null=True, verbose_name='描述')),
                ('extension', models.CharField(blank=True, db_column='Extension', max_length=300, null=True, verbose_name='颜色')),
                ('ticketdelay', models.IntegerField(blank=True, db_column='TicketDelay', verbose_name='注单延时')),
            ],
            options={
                'db_table': 'TB_LimitUserGroup',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbLivefeed',
            fields=[
                ('id', models.BigAutoField(db_column='Id', primary_key=True, serialize=False)),
                ('sportid', models.IntegerField(db_column='SportId', verbose_name='体育类型')),
                ('livefeedid', models.BigIntegerField(db_column='LiveFeedId', verbose_name='FeedID')),
                ('matchid', models.BigIntegerField(db_column='MatchId')),
                ('eventid', models.BigIntegerField(db_column='EventId')),
                ('eventtypeid', models.IntegerField(db_column='EventTypeId', verbose_name='')),
                ('extrainfo', models.IntegerField(db_column='ExtraInfo')),
                ('side', models.IntegerField(db_column='Side')),
                ('matchtime', models.CharField(blank=True, db_column='MatchTime', max_length=32, null=True, verbose_name='比赛时间')),
                ('matchscore', models.CharField(blank=True, db_column='MatchScore', max_length=32, null=True, verbose_name='比分')),
                ('eventdesc', models.CharField(blank=True, db_column='EventDesc', max_length=255, null=True, verbose_name='描述')),
                ('eventdesczh', models.CharField(blank=True, db_column='EventDescZh', max_length=255, null=True)),
                ('statuscode', models.IntegerField(db_column='StatusCode')),
                ('betstatus', models.IntegerField(db_column='BetStatus', verbose_name='投注状态')),
                ('servertime', models.DateTimeField(auto_now=True, db_column='ServerTime', verbose_name='服务器时间')),
                ('createtime', models.DateTimeField(auto_now=True, db_column='CreateTime', verbose_name='创建时间')),
            ],
            options={
                'db_table': 'TB_Livefeed',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbLivescout',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('servertime', models.DateTimeField(auto_now_add=True, db_column='ServerTime', verbose_name='服务器时间')),
                ('matchid', models.BigIntegerField(db_column='MatchId', verbose_name='比赛ID')),
                ('eventid', models.CharField(db_column='EventId', max_length=50)),
                ('matchstatus', models.CharField(db_column='MatchStatus', max_length=50)),
                ('matchstatusid', models.IntegerField(db_column='MatchStatusId')),
                ('scoutfeedtype', models.IntegerField(db_column='ScoutFeedType')),
                ('betstatus', models.IntegerField(db_column='BetStatus', verbose_name='投注状态')),
                ('side', models.IntegerField(db_column='Side', default=0)),
                ('typeid', models.IntegerField(db_column='TypeId')),
                ('matchtime', models.CharField(blank=True, db_column='MatchTime', max_length=50, null=True, verbose_name='比赛时间')),
                ('matchscore', models.CharField(blank=True, db_column='MatchScore', max_length=50, null=True, verbose_name='比赛分数')),
                ('player1', models.BigIntegerField(db_column='Player1', default=0)),
                ('player2', models.BigIntegerField(db_column='Player2', default=0)),
                ('posx', models.IntegerField(db_column='PosX', default=0)),
                ('posy', models.IntegerField(db_column='PosY', default=0)),
                ('brextrainfo', models.CharField(db_column='BrExtraInfo', max_length=150, verbose_name='产生原因')),
                ('eventtypeid', models.IntegerField(db_column='EventTypeId')),
                ('extrainfo', models.IntegerField(db_column='ExtraInfo', default=0)),
                ('eventdesc', models.CharField(blank=True, db_column='EventDesc', max_length=150, null=True, verbose_name='事件描述')),
                ('createtime', models.DateTimeField(auto_now_add=True, db_column='CreateTime', verbose_name='创建时间')),
                ('remainingtimeinperiod', models.CharField(blank=True, db_column='RemainingTimeInPeriod', max_length=20, null=True)),
                ('periodnumber', models.IntegerField(blank=True, db_column='PeriodNumber', null=True)),
                ('periodscore', models.CharField(blank=True, db_column='PeriodScore', max_length=20, null=True)),
            ],
            options={
                'db_table': 'TB_LiveScout',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbMarketgroup',
            fields=[
                ('groupid', models.IntegerField(db_column='GroupID', primary_key=True, serialize=False, verbose_name='组ID')),
                ('sportid', models.IntegerField(db_column='SportID', verbose_name='体育类型')),
                ('groupname', models.CharField(db_column='GroupName', max_length=100, verbose_name='组名')),
                ('groupnamezh', models.CharField(db_column='GroupNameZH', max_length=100, verbose_name='中文名')),
                ('description', models.CharField(blank=True, db_column='Description', max_length=200, null=True, verbose_name='描述')),
                ('sort', models.IntegerField(db_column='Sort', verbose_name='组排序')),
            ],
            options={
                'verbose_name': '玩法组(表)',
                'db_table': 'TB_MarketGroup',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbMarketgroupwithmarket',
            fields=[
                ('tid', models.AutoField(db_column='TID', primary_key=True, serialize=False)),
                ('groupid', models.IntegerField(db_column='GroupID', verbose_name='玩法组')),
                ('marketsort', models.IntegerField(db_column='MarketSort', default=0, verbose_name='组内玩法排序')),
                ('enabled', models.BooleanField(db_column='Enabled', default=True, verbose_name='启用')),
                ('description', models.CharField(blank=True, db_column='Description', max_length=200, null=True, verbose_name='描述')),
            ],
            options={
                'db_table': 'TB_MarketGroupWithMarket',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbMarkethcpswitch',
            fields=[
                ('tid', models.AutoField(db_column='Tid', primary_key=True, serialize=False)),
                ('type', models.IntegerField(db_column='Type', help_text='初始值(0)/封比赛(1)/玩法(2)/盘口(3)')),
                ('matchid', models.BigIntegerField(db_column='MatchID')),
                ('specifiers', models.CharField(db_column='Specifiers', max_length=100)),
                ('specialbetvalue', models.CharField(db_column='SpecialBetValue', max_length=50)),
                ('status', models.IntegerField(db_column='Status')),
                ('createtime', models.DateTimeField(auto_now_add=True, db_column='CreateTime')),
                ('updatetime', models.DateTimeField(auto_now=True, db_column='UpdateTime')),
                ('marketname', models.CharField(blank=True, db_column='MarketName', max_length=50, null=True)),
                ('specialbetname', models.CharField(blank=True, db_column='SpecialBetName', max_length=50, null=True)),
                ('fortherest', models.CharField(blank=True, db_column='ForTheRest', max_length=50)),
            ],
            options={
                'db_table': 'TB_MarketHcpSwitch',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbMarketlistwithsport',
            fields=[
                ('tid', models.AutoField(db_column='TID', primary_key=True, serialize=False)),
                ('marketshowname', models.CharField(blank=True, db_column='MarketShowName', max_length=200, null=True, verbose_name='列表展示名')),
                ('sort', models.IntegerField(db_column='Sort', verbose_name='排序')),
                ('enabled', models.BooleanField(db_column='Enabled', verbose_name='启用')),
                ('description', models.CharField(blank=True, db_column='Description', max_length=200, null=True, verbose_name='描述')),
            ],
            options={
                'db_table': 'TB_MarketListWithSport',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbMarkets',
            fields=[
                ('marketid', models.IntegerField(db_column='MarketID', primary_key=True, serialize=False, verbose_name='玩法ID')),
                ('marketname', models.CharField(blank=True, db_column='MarketName', max_length=200, null=True, verbose_name='玩法名称')),
                ('marketnamezh', models.CharField(blank=True, db_column='MarketNameZH', max_length=200, null=True, verbose_name='玩法中文名')),
                ('includesoutcomestype', models.CharField(blank=True, db_column='IncludesOutcomesType', max_length=200, null=True)),
                ('outcometype', models.CharField(blank=True, db_column='OutcomeType', max_length=200, null=True)),
                ('description', models.CharField(blank=True, db_column='Description', max_length=200, null=True, verbose_name='描述')),
                ('sort', models.IntegerField(db_column='Sort', verbose_name='排序')),
                ('enabled', models.NullBooleanField(db_column='Enabled', verbose_name='启用')),
                ('isasian', models.NullBooleanField(db_column='IsAsian')),
                ('weight', models.DecimalField(db_column='Weight', decimal_places=4, max_digits=18, verbose_name='权重')),
                ('ticketdelay', models.IntegerField(blank=True, db_column='TicketDelay', verbose_name='注单延时')),
                ('extendweight', models.DecimalField(db_column='ExtendWeight', decimal_places=2, max_digits=18, verbose_name='扩展权重')),
            ],
            options={
                'db_table': 'TB_Markets',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbMatch',
            fields=[
                ('sportid', models.IntegerField(db_column='SportID', verbose_name='运动类型')),
                ('matchid', models.BigIntegerField(db_column='MatchID', primary_key=True, serialize=False, verbose_name='比赛ID')),
                ('eventid', models.CharField(db_column='EventID', max_length=50, unique=True)),
                ('tournamentid', models.IntegerField(db_column='TournamentID', verbose_name='联赛')),
                ('uniquetournamentid', models.IntegerField(db_column='UniqueTournamentId')),
                ('roundinfo', models.IntegerField(db_column='RoundInfo')),
                ('team1id', models.IntegerField(db_column='Team1ID')),
                ('team1en', models.CharField(blank=True, db_column='Team1EN', max_length=100, null=True)),
                ('team1zh', models.CharField(blank=True, db_column='Team1ZH', max_length=100, null=True, verbose_name='主队')),
                ('team2id', models.IntegerField(db_column='Team2ID')),
                ('team2en', models.CharField(blank=True, db_column='Team2EN', max_length=100, null=True)),
                ('team2zh', models.CharField(blank=True, db_column='Team2ZH', max_length=100, null=True, verbose_name='客队')),
                ('prematchdate', models.DateTimeField(db_column='PreMatchDate')),
                ('matchdate', models.DateTimeField(db_column='MatchDate', verbose_name='比赛日期')),
                ('marketstatus', models.IntegerField(choices=[(1, '早盘'), (2, '滚球'), (3, '关闭')], db_column='MarketStatus', verbose_name='市场状态')),
                ('statuscode', models.IntegerField(choices=[(0, '未开赛'), (1, '第一节'), (2, '第二节'), (3, '第三节'), (4, '第四节'), (5, '第五节'), (6, '上半场'), (7, '下半场'), (8, '第一盘'), (9, '第二盘'), (10, '第三盘'), (11, '第四盘'), (12, '第五盘'), (13, '第一节'), (14, '第二节'), (15, '第三节'), (16, '第四节'), (17, '金局'), (20, '已开始'), (21, '进行中'), (22, '比赛即将开始'), (30, '暂停'), (31, '半场结束'), (32, '等待加时赛'), (33, '加时赛中场'), (34, '等待点球决胜'), (35, '等待点球决胜'), (36, '等待点球大战'), (37, '等待金局'), (40, '加时'), (41, '加时第一节'), (42, '加时第二节'), (50, '点球'), (51, '点球'), (52, '点球'), (60, '延期'), (61, '推迟开赛'), (70, '取消'), (71, '第1场比赛'), (72, '第2场比赛'), (73, '第3场比赛'), (74, '第4场比赛'), (75, '第5场比赛'), (76, '第6场比赛'), (77, '第7场比赛'), (80, '中断'), (81, '停赛'), (90, '弃赛'), (91, '单独完成赛事直接获胜'), (92, '退出'), (93, '主队大胜'), (94, '客队大胜'), (95, '主队弃赛,客队胜'), (96, '客队弃赛,主队胜'), (97, '主队违规,客队胜'), (98, '客队违规,主队胜'), (99, '唯一赛果'), (100, '比赛结束'), (110, '加时赛后'), (111, '加时赛后'), (120, '点球决胜后'), (130, '金局后'), (141, '第一图'), (142, '第二图'), (143, '第三图'), (144, '第四图'), (145, '第五图'), (146, '第六图'), (147, '第七图'), (151, '1st Game'), (152, '2nd Game'), (153, '3rd Game'), (154, '4th Game'), (155, '5th Game'), (161, '1st end'), (162, '2nd end'), (163, '3rd end'), (164, '4th end'), (165, '5th end'), (166, '6th end'), (167, '7th end'), (168, '8th end'), (169, '9th end'), (170, '10th end'), (171, 'Extra end'), (301, '第一节结束'), (302, '第二节结束'), (303, '第三节结束'), (304, '第四节结束'), (305, '第五图结束'), (306, '第六图结束'), (401, '1st inning top'), (402, '1st inning bottom'), (403, '2nd inning top'), (404, '2nd inning bottom'), (405, '3rd inning top'), (406, '3rd inning bottom'), (407, '4th inning top'), (408, '4th inning bottom'), (409, '5th inning top'), (410, '5th inning bottom'), (411, '6th inning top'), (412, '6th inning bottom'), (413, '7th inning top'), (414, '7th inning bottom'), (415, '8th inning top'), (416, '8th inning bottom'), (417, '9th inning top'), (418, '9th inning bottom'), (419, 'Extra inning top'), (420, 'Extra inning bottom'), (421, 'Break top1bottom1'), (422, 'Break top2bottom1'), (423, 'Break top2bottom2'), (424, 'Break top3bottom2'), (425, 'Break top3bottom3'), (426, 'Break top4bottom3'), (427, 'Break top4bottom4'), (428, 'Break top5bottom4'), (429, 'Break top5bottom5'), (430, 'Break top6bottom5'), (431, 'Break top6bottom6'), (432, 'Break top7bottom6'), (433, 'Break top7bottom7'), (434, 'Break top8bottom7'), (435, 'Break top8bottom8'), (436, 'Break top9bottom8'), (437, 'Break top9bottom9'), (438, 'Break topEIbottom9'), (439, 'Break topEIbottomEI'), (440, '突然死亡法'), (441, '第六盘'), (442, '第七盘'), (443, '等待突然死亡'), (444, '突然死亡后'), (445, '打破'), (501, '第一局,主队'), (502, '第一局,客队'), (503, '第二局,主队'), (504, '第二局,客队'), (505, 'Awaiting super over'), (506, 'Super over, home team'), (507, 'Super over, away team'), (508, 'After super over'), (509, '局休'), (510, 'Super over break'), (511, '午休'), (512, '茶歇'), (513, '柱'), (514, '8th set'), (515, '9th set'), (516, '10th set'), (517, '11th set'), (518, '12th set'), (519, '13th set'), (520, 'Third innings, home team'), (521, 'Third innings, away team'), (522, 'Fourth innings, home team'), (523, 'Fourth innings, away team'), (524, 'Dinner break'), (525, 'Drinks'), (526, 'Super over'), (531, '1st inning'), (532, '2nd inning'), (533, '3rd inning'), (534, '4th inning'), (535, '5th inning'), (536, '6th inning'), (537, '7th inning'), (538, '8th inning'), (539, '9th inning')], db_column='StatusCode', verbose_name='状态')),
                ('score', models.CharField(blank=True, db_column='Score', max_length=20, null=True, verbose_name='比分')),
                ('hasliveodds', models.BooleanField(db_column='HasLiveOdds', verbose_name='走地盘')),
                ('isrecommend', models.BooleanField(db_column='IsRecommend', verbose_name='推荐')),
                ('ishidden', models.BooleanField(db_column='IsHidden', verbose_name='隐藏')),
                ('iscloseliveodds', models.IntegerField(blank=True, db_column='IsCloseLiveOdds', null=True)),
                ('winner', models.IntegerField(choices=[(0, ''), (1, '主胜'), (2, '客胜'), (3, '平局')], db_column='Winner', verbose_name='胜者')),
                ('terminator', models.CharField(blank=True, db_column='Terminator', max_length=20, null=True)),
                ('weight', models.DecimalField(blank=True, db_column='Weight', decimal_places=4, max_digits=18, null=True, verbose_name='权重')),
                ('createtime', models.DateTimeField(db_column='CreateTime')),
                ('updatetime', models.DateTimeField(blank=True, db_column='UpdateTime', null=True)),
                ('ticketdelay', models.IntegerField(blank=True, db_column='TicketDelay', verbose_name='注单延时')),
                ('isdangerous', models.IntegerField(blank=True, db_column='IsDangerous', null=True, verbose_name='危险球')),
                ('oddsadjustment', models.DecimalField(db_column='OddsAdjustment', decimal_places=2, max_digits=2, verbose_name='赔率调整值')),
                ('oddsadjustmax', models.DecimalField(db_column='OddsAdjustMax', decimal_places=2, max_digits=2, verbose_name='赔率调整最大值')),
                ('baseticketeamout', models.DecimalField(db_column='BaseTicketeAmout', decimal_places=2, help_text='每投注X元赔率调整一次', max_digits=18, verbose_name='投注差额基数')),
                ('coveragesource', models.CharField(blank=True, db_column='CoverageSource', max_length=16, null=True)),
                ('coveragelevel', models.CharField(blank=True, db_column='CoverageLevel', max_length=16, null=True)),
                ('source', models.IntegerField(choices=[(1, 'Betradar'), (2, '188')], db_column='Source', verbose_name='数据源')),
            ],
            options={
                'db_table': 'TB_Match',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbMaxpayout',
            fields=[
                ('tid', models.BigAutoField(db_column='Tid', primary_key=True, serialize=False)),
                ('viplv', models.IntegerField(blank=True, choices=[(1, '青铜'), (2, '白银'), (3, '黄金'), (4, '钻石'), (5, '皇冠')], db_column='VIPLv', null=True, verbose_name='VIP等级')),
                ('maxpayout', models.DecimalField(db_column='MaxPayout', decimal_places=2, max_digits=18, verbose_name='最大赔付')),
                ('status', models.IntegerField(blank=True, choices=[(1, '启用'), (0, '禁用')], db_column='Status', default=1, verbose_name='状态')),
                ('description', models.CharField(blank=True, db_column='Description', max_length=500, null=True, verbose_name='备注')),
                ('createtime', models.DateTimeField(auto_now=True, db_column='CreateTime', null=True, verbose_name='创建时间')),
                ('updatetime', models.DateTimeField(blank=True, db_column='UpdateTime', null=True)),
            ],
            options={
                'db_table': 'TB_MaxPayout',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbMaxpayouttype',
            fields=[
                ('limittype', models.IntegerField(db_column='LimitType', primary_key=True, serialize=False)),
                ('description', models.CharField(blank=True, db_column='Description', max_length=200, null=True)),
                ('level', models.IntegerField(db_column='Level')),
                ('defaultmaxpayout', models.DecimalField(blank=True, db_column='DefaultMaxPayout', decimal_places=2, max_digits=18, null=True)),
                ('isenable', models.BooleanField(db_column='IsEnable')),
                ('enum', models.CharField(blank=True, db_column='Enum', max_length=50, null=True)),
            ],
            options={
                'db_table': 'TB_MaxPayoutType',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbOperationlog',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('type', models.CharField(blank=True, db_column='Type', max_length=500, null=True)),
                ('content', models.CharField(db_column='Content', max_length=2000, verbose_name='内容')),
                ('memo', models.CharField(db_column='Memo', max_length=1000, verbose_name='备注')),
                ('createuser', models.CharField(blank=True, db_column='CreateUser', max_length=100, null=True, verbose_name='操作人')),
                ('createtime', models.DateTimeField(auto_now_add=True, db_column='CreateTime', verbose_name='创建时间')),
            ],
            options={
                'db_table': 'TB_OperationLog',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbOutcomes',
            fields=[
                ('uniqueoutcomid', models.IntegerField(db_column='UniqueOutcomID', primary_key=True, serialize=False)),
                ('outcomeid', models.CharField(db_column='OutcomeID', max_length=200)),
                ('outcomename', models.CharField(blank=True, db_column='OutcomeName', max_length=200, null=True)),
                ('outcomenamezh', models.CharField(blank=True, db_column='OutcomeNameZH', max_length=200, null=True)),
                ('description', models.CharField(blank=True, db_column='Description', max_length=200, null=True)),
            ],
            options={
                'db_table': 'TB_Outcomes',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbParameterinfo',
            fields=[
                ('tid', models.BigAutoField(db_column='Tid', primary_key=True, serialize=False)),
                ('tag', models.CharField(db_column='Tag', max_length=50)),
                ('value', models.CharField(db_column='Value', max_length=50, verbose_name='配置值')),
                ('memo', models.CharField(blank=True, db_column='Memo', max_length=50, null=True, verbose_name='配置项')),
                ('isactive', models.BooleanField(db_column='IsActive', verbose_name='状态')),
                ('daysnumber', models.IntegerField(db_column='DaysNumber', verbose_name='天数')),
                ('leveltype', models.CharField(db_column='LevelType', max_length=50, verbose_name='用户等级')),
                ('levelid', models.IntegerField(db_column='LevelId')),
            ],
            options={
                'db_table': 'TB_ParameterInfo',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbPaychannel',
            fields=[
                ('paychannelid', models.AutoField(db_column='PayChannelId', primary_key=True, serialize=False, verbose_name='渠道ID')),
                ('channelname', models.CharField(db_column='ChannelName', max_length=50, verbose_name='Apolo渠道名称')),
                ('channeltype', models.CharField(db_column='ChannelType', max_length=50, verbose_name='渠道名称')),
                ('active', models.BooleanField(db_column='Active', default=True)),
                ('minamount', models.DecimalField(db_column='MinAmount', decimal_places=2, default=0, max_digits=18, verbose_name='最小金额')),
                ('maxamount', models.DecimalField(db_column='MaxAmount', decimal_places=2, default=0, max_digits=18, verbose_name='最大金额')),
                ('optionalamount', models.CharField(db_column='OptionalAmount', help_text='多个金额以,分割', max_length=500, verbose_name='快捷金额')),
                ('channelicon', models.CharField(db_column='ChannelIcon', max_length=150, verbose_name='Icon')),
                ('memo', models.CharField(blank=True, db_column='Memo', max_length=150, verbose_name='备注')),
                ('isonline', models.BooleanField(db_column='IsOnline', verbose_name='是否三方')),
                ('isrecommend', models.BooleanField(db_column='IsRecommend', verbose_name='推荐')),
                ('sort', models.IntegerField(db_column='Sort', verbose_name='排序')),
                ('helpurl', maindb.cus_models_fields.CusPictureField(blank=True, db_column='HelpUrl', max_length=255, null=True, verbose_name='帮助地址')),
                ('tips', models.CharField(blank=True, db_column='Tips', max_length=100, null=True, verbose_name='提示')),
                ('ispaytocard', models.IntegerField(blank=True, choices=[(0, '否'), (1, '是')], db_column='IsPayToCard', default=0, null=True, verbose_name='是否转卡')),
                ('isfixedamount', models.BooleanField(db_column='IsFixedAmount', default=False, verbose_name='是否固定金额')),
            ],
            options={
                'db_table': 'TB_PayChannel',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbPaychannelblackaccount',
            fields=[
                ('blackaccountid', models.AutoField(db_column='BlackAccountID', primary_key=True, serialize=False)),
                ('account', models.CharField(blank=True, db_column='Account', max_length=255, null=True, verbose_name='账号')),
                ('iswork', models.BooleanField(db_column='IsWork', default=True, verbose_name='启用')),
            ],
            options={
                'db_table': 'TB_PayChannelBlackAccount',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbPaychannelblackiprange',
            fields=[
                ('blackiprangelistid', models.AutoField(db_column='BlackIpRangeListID', primary_key=True, serialize=False, verbose_name='ID')),
                ('startip', models.CharField(db_column='StartIp', max_length=16, verbose_name='开始IP')),
                ('startipnum', models.BigIntegerField(db_column='StartIpNum', verbose_name='StartIpNum')),
                ('endip', models.CharField(db_column='EndIp', help_text='起始ip相同则表示控制单个ip', max_length=16, verbose_name='结束IP')),
                ('endipnum', models.BigIntegerField(db_column='EndIpNum', verbose_name='EndIpNum')),
                ('iswork', models.BooleanField(db_column='IsWork', default=True, verbose_name='是否有效')),
            ],
            options={
                'db_table': 'TB_PayChannelBlackIPRange',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbPaychannelgroup',
            fields=[
                ('groupid', models.AutoField(db_column='GroupID', primary_key=True, serialize=False, verbose_name='ID')),
                ('groupway', models.CharField(db_column='GroupWay', max_length=50, verbose_name='组名')),
                ('groupicon', models.CharField(db_column='GroupIcon', max_length=50, verbose_name='图标')),
                ('groupsubtitle', models.CharField(blank=True, db_column='GroupSubTitle', max_length=50, null=True, verbose_name='子标题')),
                ('sort', models.IntegerField(db_column='Sort', verbose_name='排序')),
            ],
            options={
                'db_table': 'TB_PayChannelGroup',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbPaychanneljoinlevel',
            fields=[
                ('tid', models.AutoField(db_column='Tid', primary_key=True, serialize=False)),
                ('accountlevel', models.IntegerField(db_column='AccountLevel', verbose_name='用户等级')),
            ],
            options={
                'db_table': 'TB_PayChannelJoinLevel',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbPeriodscore',
            fields=[
                ('tid', models.BigAutoField(db_column='TID', primary_key=True, serialize=False)),
                ('matchid', models.BigIntegerField(blank=True, db_column='MatchID', null=True, verbose_name='比赛ID')),
                ('statuscode', models.IntegerField(blank=True, choices=[(0, '未开赛'), (1, '第一节'), (2, '第二节'), (3, '第三节'), (4, '第四节'), (5, '第五节'), (6, '上半场'), (7, '下半场'), (8, '第一盘'), (9, '第二盘'), (10, '第三盘'), (11, '第四盘'), (12, '第五盘'), (13, '第一节'), (14, '第二节'), (15, '第三节'), (16, '第四节'), (17, '金局'), (20, '已开始'), (21, '进行中'), (22, '比赛即将开始'), (30, '暂停'), (31, '半场结束'), (32, '等待加时赛'), (33, '加时赛中场'), (34, '等待点球决胜'), (35, '等待点球决胜'), (36, '等待点球大战'), (37, '等待金局'), (40, '加时'), (41, '加时第一节'), (42, '加时第二节'), (50, '点球'), (51, '点球'), (52, '点球'), (60, '延期'), (61, '推迟开赛'), (70, '取消'), (71, '第1场比赛'), (72, '第2场比赛'), (73, '第3场比赛'), (74, '第4场比赛'), (75, '第5场比赛'), (76, '第6场比赛'), (77, '第7场比赛'), (80, '中断'), (81, '停赛'), (90, '弃赛'), (91, '单独完成赛事直接获胜'), (92, '退出'), (93, '主队大胜'), (94, '客队大胜'), (95, '主队弃赛,客队胜'), (96, '客队弃赛,主队胜'), (97, '主队违规,客队胜'), (98, '客队违规,主队胜'), (99, '唯一赛果'), (100, '比赛结束'), (110, '加时赛后'), (111, '加时赛后'), (120, '点球决胜后'), (130, '金局后'), (141, '第一图'), (142, '第二图'), (143, '第三图'), (144, '第四图'), (145, '第五图'), (146, '第六图'), (147, '第七图'), (151, '1st Game'), (152, '2nd Game'), (153, '3rd Game'), (154, '4th Game'), (155, '5th Game'), (161, '1st end'), (162, '2nd end'), (163, '3rd end'), (164, '4th end'), (165, '5th end'), (166, '6th end'), (167, '7th end'), (168, '8th end'), (169, '9th end'), (170, '10th end'), (171, 'Extra end'), (301, '第一节结束'), (302, '第二节结束'), (303, '第三节结束'), (304, '第四节结束'), (305, '第五图结束'), (306, '第六图结束'), (401, '1st inning top'), (402, '1st inning bottom'), (403, '2nd inning top'), (404, '2nd inning bottom'), (405, '3rd inning top'), (406, '3rd inning bottom'), (407, '4th inning top'), (408, '4th inning bottom'), (409, '5th inning top'), (410, '5th inning bottom'), (411, '6th inning top'), (412, '6th inning bottom'), (413, '7th inning top'), (414, '7th inning bottom'), (415, '8th inning top'), (416, '8th inning bottom'), (417, '9th inning top'), (418, '9th inning bottom'), (419, 'Extra inning top'), (420, 'Extra inning bottom'), (421, 'Break top1bottom1'), (422, 'Break top2bottom1'), (423, 'Break top2bottom2'), (424, 'Break top3bottom2'), (425, 'Break top3bottom3'), (426, 'Break top4bottom3'), (427, 'Break top4bottom4'), (428, 'Break top5bottom4'), (429, 'Break top5bottom5'), (430, 'Break top6bottom5'), (431, 'Break top6bottom6'), (432, 'Break top7bottom6'), (433, 'Break top7bottom7'), (434, 'Break top8bottom7'), (435, 'Break top8bottom8'), (436, 'Break top9bottom8'), (437, 'Break top9bottom9'), (438, 'Break topEIbottom9'), (439, 'Break topEIbottomEI'), (440, '突然死亡法'), (441, '第六盘'), (442, '第七盘'), (443, '等待突然死亡'), (444, '突然死亡后'), (445, '打破'), (501, '第一局,主队'), (502, '第一局,客队'), (503, '第二局,主队'), (504, '第二局,客队'), (505, 'Awaiting super over'), (506, 'Super over, home team'), (507, 'Super over, away team'), (508, 'After super over'), (509, '局休'), (510, 'Super over break'), (511, '午休'), (512, '茶歇'), (513, '柱'), (514, '8th set'), (515, '9th set'), (516, '10th set'), (517, '11th set'), (518, '12th set'), (519, '13th set'), (520, 'Third innings, home team'), (521, 'Third innings, away team'), (522, 'Fourth innings, home team'), (523, 'Fourth innings, away team'), (524, 'Dinner break'), (525, 'Drinks'), (526, 'Super over'), (531, '1st inning'), (532, '2nd inning'), (533, '3rd inning'), (534, '4th inning'), (535, '5th inning'), (536, '6th inning'), (537, '7th inning'), (538, '8th inning'), (539, '9th inning')], db_column='StatusCode', null=True, verbose_name='阶段')),
                ('scoretype', models.IntegerField(blank=True, choices=[(1, '比分'), (2, '黄牌'), (3, '红牌'), (4, '红黄牌'), (5, '角球')], db_column='ScoreType', null=True, verbose_name='记分类型')),
                ('periodnumber', models.IntegerField(blank=True, db_column='PeriodNumber', null=True, verbose_name='阶段')),
                ('home', models.IntegerField(blank=True, db_column='Home', null=True, verbose_name='主队')),
                ('away', models.IntegerField(blank=True, db_column='Away', null=True, verbose_name='客队')),
                ('createtime', models.DateTimeField(auto_now=True, db_column='CreateTime', null=True, verbose_name='创建时间')),
                ('type', models.IntegerField(blank=True, choices=[(0, '常规时间'), (1, '加时'), (2, '点球大战'), (3, '其他')], db_column='Type', null=True, verbose_name='常规/加时')),
            ],
            options={
                'db_table': 'TB_PeriodScore',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbRecharge',
            fields=[
                ('rechargeid', models.AutoField(db_column='RechargeId', primary_key=True, serialize=False, verbose_name='记录ID')),
                ('amount', models.DecimalField(db_column='Amount', decimal_places=2, max_digits=18, verbose_name='金额')),
                ('orderid', models.CharField(db_column='OrderID', max_length=50, verbose_name='订单号')),
                ('isauto', models.IntegerField(blank=True, choices=[(0, '手动'), (1, '自动')], db_column='IsAuto', default=0, verbose_name='自动')),
                ('account', models.CharField(db_column='Account', max_length=255)),
                ('createtime', models.DateTimeField(db_column='CreateTime', verbose_name='创建时间')),
                ('channelname', models.CharField(db_column='ChannelName', max_length=50)),
                ('status', models.IntegerField(choices=[(1, '未充值'), (2, '成功'), (3, '失败')], db_column='Status')),
                ('apollomsg', models.CharField(db_column='ApolloMsg', max_length=500)),
                ('memo', models.CharField(db_column='Memo', max_length=150, verbose_name='备注')),
                ('amounttype', models.IntegerField(choices=[(1, '余额'), (2, '佣金')], db_column='AmountType', verbose_name='类型')),
                ('apolloinfo', models.CharField(blank=True, db_column='ApolloInfo', max_length=800, null=True)),
                ('confirmtime', models.DateTimeField(blank=True, db_column='ConfirmTime', null=True, verbose_name='处理时间')),
                ('confirmamount', models.DecimalField(db_column='ConfirmAmount', decimal_places=2, max_digits=18, verbose_name='确认金额')),
                ('consumeamount', models.DecimalField(db_column='ConsumeAmount', decimal_places=2, max_digits=18)),
                ('consumestatus', models.IntegerField(db_column='ConsumeStatus')),
                ('bankcardno', models.CharField(blank=True, db_column='BankCardNo', max_length=50, null=True, verbose_name='申请转账卡号')),
                ('accountip', models.CharField(blank=True, db_column='AccountIP', max_length=50, null=True, verbose_name='充值ip')),
            ],
            options={
                'db_table': 'TB_Recharge',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbRechargeareablacklist',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('status', models.IntegerField(db_column='Status', default=1)),
                ('area', models.CharField(db_column='Area', max_length=200, verbose_name='地区')),
            ],
            options={
                'db_table': 'TB_RechargeAreaBlackList',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbRisklevellog',
            fields=[
                ('tid', models.AutoField(db_column='Tid', primary_key=True, serialize=False)),
                ('accountid', models.BigIntegerField(db_column='AccountID')),
                ('oldrisklevel', models.IntegerField(db_column='OldRiskLevel')),
                ('newrisklevel', models.IntegerField(db_column='NewRiskLevel')),
                ('upordown', models.IntegerField(db_column='UpOrDown')),
                ('createtime', models.DateTimeField(auto_now_add=True, db_column='CreateTime')),
                ('createuser', models.CharField(blank=True, db_column='CreateUser', max_length=50, null=True)),
            ],
            options={
                'db_table': 'TB_RiskLevelLog',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbSourcecontrol',
            fields=[
                ('tid', models.AutoField(db_column='Tid', primary_key=True, serialize=False)),
                ('source', models.IntegerField(blank=True, db_column='Source', null=True)),
                ('sporttype', models.IntegerField(blank=True, db_column='SportType', null=True)),
                ('oddskind', models.IntegerField(blank=True, db_column='OddsKind', null=True)),
                ('sites', models.CharField(blank=True, db_column='Sites', max_length=100, null=True)),
                ('begintime', models.DateTimeField(blank=True, db_column='BeginTime', null=True)),
                ('endtime', models.DateTimeField(blank=True, db_column='EndTime', null=True)),
                ('status', models.IntegerField(blank=True, db_column='Status', null=True)),
                ('enabled', models.NullBooleanField(db_column='Enabled')),
                ('updatetime', models.DateTimeField(blank=True, db_column='UpdateTime', null=True)),
            ],
            options={
                'db_table': 'TB_SourceControl',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbSportaccount',
            fields=[
                ('accountid', models.ForeignKey(db_column='AccountId', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='maindb.TbAccount', verbose_name='账号')),
                ('username', models.CharField(db_column='UserName', max_length=50, verbose_name='沙巴用户名')),
                ('transferin', models.DecimalField(db_column='TransferIn', decimal_places=4, max_digits=18, verbose_name='转入')),
                ('transferout', models.DecimalField(db_column='TransferOut', decimal_places=4, max_digits=18, verbose_name='转出')),
                ('winorloss', models.DecimalField(db_column='WinOrLoss', decimal_places=4, max_digits=18, verbose_name='亏盈')),
                ('bonusrate', models.DecimalField(db_column='BonusRate', decimal_places=4, max_digits=18, verbose_name='反点率')),
                ('rebate', models.DecimalField(db_column='Rebate', decimal_places=4, max_digits=18, verbose_name='总反水')),
                ('availablescores', models.DecimalField(db_column='AvailableScores', decimal_places=4, max_digits=18, verbose_name='余额')),
                ('createtime', models.DateTimeField(db_column='CreateTime', verbose_name='创建时间')),
                ('fundswitch', models.BooleanField(db_column='FundSwitch', verbose_name='资金开关')),
            ],
            options={
                'db_table': 'TB_SportAccount',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbSportmoneyininfo',
            fields=[
                ('moneyinid', models.AutoField(db_column='MoneyInID', primary_key=True, serialize=False, verbose_name='记录ID')),
                ('amount', models.DecimalField(blank=True, db_column='Amount', decimal_places=4, max_digits=18, null=True, verbose_name='金额')),
                ('orderid', models.CharField(blank=True, db_column='OrderID', max_length=50, null=True, verbose_name='订单号')),
                ('ordertime', models.DateTimeField(blank=True, db_column='OrderTime', null=True, verbose_name='时间')),
                ('handle', models.CharField(blank=True, db_column='Handle', max_length=50, null=True, verbose_name='操作者')),
                ('handtime', models.DateTimeField(blank=True, db_column='HandTime', null=True, verbose_name='操作时间')),
                ('username', models.CharField(blank=True, db_column='UserName', max_length=50, null=True, verbose_name='用户名')),
                ('status', models.IntegerField(blank=True, choices=[(0, '等待转入'), (1, '正在转入'), (2, '转入完成'), (3, '转入失败'), (4, '转入失败,已退款')], db_column='Status', null=True, verbose_name='状态')),
                ('memo', models.CharField(blank=True, db_column='Memo', max_length=2000, null=True, verbose_name='备注')),
                ('tsamp', models.TextField(blank=True, db_column='Tsamp', null=True)),
            ],
            options={
                'db_table': 'TB_SportMoneyInInfo',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbSportmoneyoutinfo',
            fields=[
                ('moneyoutid', models.AutoField(db_column='MoneyOutID', primary_key=True, serialize=False, verbose_name='记录ID')),
                ('amount', models.DecimalField(blank=True, db_column='Amount', decimal_places=4, max_digits=18, null=True, verbose_name='金额')),
                ('orderid', models.CharField(blank=True, db_column='OrderID', max_length=50, null=True, verbose_name='订单号')),
                ('ordertime', models.DateTimeField(blank=True, db_column='OrderTime', null=True, verbose_name='时间')),
                ('username', models.CharField(blank=True, db_column='UserName', max_length=50, null=True, verbose_name='沙巴用户名')),
                ('handle', models.CharField(blank=True, db_column='Handle', max_length=50, null=True, verbose_name='操作者')),
                ('handtime', models.DateTimeField(blank=True, db_column='HandTime', null=True, verbose_name='操作时间')),
                ('status', models.IntegerField(blank=True, choices=[(0, '等待处理'), (1, '正在收回'), (2, '收回完成'), (4, '收回失败')], db_column='Status', null=True, verbose_name='状态')),
                ('memo', models.CharField(blank=True, db_column='Memo', max_length=2000, null=True, verbose_name='备注')),
                ('tsamp', models.TextField(blank=True, db_column='Tsamp', null=True)),
            ],
            options={
                'db_table': 'TB_SportMoneyOutInfo',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbSportprofitloss',
            fields=[
                ('profitlossid', models.AutoField(db_column='ProfitLossID', primary_key=True, serialize=False, verbose_name='记录ID')),
                ('profitlosstime', models.DateTimeField(blank=True, db_column='ProfitLossTime', null=True, verbose_name='游戏时间')),
                ('profitlosstype', models.CharField(blank=True, db_column='ProfitLossType', max_length=50, null=True)),
                ('profitlossmoney', models.DecimalField(blank=True, db_column='ProfitLossMoney', decimal_places=4, max_digits=18, null=True, verbose_name='投注额')),
                ('winmoney', models.DecimalField(blank=True, db_column='WinMoney', decimal_places=4, max_digits=18, null=True, verbose_name='亏盈')),
                ('prizemoney', models.DecimalField(blank=True, db_column='PrizeMoney', decimal_places=4, max_digits=18, null=True, verbose_name='派奖额')),
                ('memo', models.CharField(blank=True, db_column='Memo', max_length=500, null=True, verbose_name='描述')),
                ('playid', models.CharField(blank=True, db_column='PlayID', max_length=50, null=True, verbose_name='游戏ID')),
                ('gametype', models.CharField(blank=True, db_column='GameType', max_length=50, null=True, verbose_name='游戏类型')),
                ('refid', models.IntegerField(blank=True, db_column='RefID', null=True, verbose_name='')),
                ('savetime', models.DateTimeField(blank=True, db_column='SaveTime', null=True, verbose_name='数据保存时间')),
                ('parentid', models.IntegerField(blank=True, db_column='ParentID', null=True)),
                ('bettime', models.DateTimeField(blank=True, db_column='BetTime', null=True)),
                ('iswin', models.IntegerField(blank=True, db_column='IsWin', null=True, verbose_name='赢')),
                ('username', models.CharField(blank=True, db_column='UserName', max_length=50, null=True, verbose_name='沙巴用户名')),
                ('rebate', models.DecimalField(db_column='Rebate', decimal_places=4, max_digits=18, verbose_name='返点金额')),
            ],
            options={
                'db_table': 'TB_SportProfitLoss',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbSporttypes',
            fields=[
                ('tid', models.AutoField(db_column='Tid', primary_key=True, serialize=False)),
                ('sportid', models.IntegerField(db_column='SportID', unique=True, verbose_name='类型ID')),
                ('sportname', models.CharField(db_column='SportName', max_length=100, verbose_name='类型名')),
                ('sportnamezh', models.CharField(db_column='SportNameZH', max_length=100, verbose_name='类型中文名')),
                ('onlinetime', models.DateTimeField(blank=True, db_column='OnlineTime', null=True, verbose_name='上线时间')),
                ('status', models.IntegerField(db_column='Status', verbose_name='状态')),
                ('sort', models.IntegerField(blank=True, db_column='Sort', null=True, verbose_name='排序')),
                ('enabled', models.BooleanField(db_column='Enabled', verbose_name='启用')),
                ('createtime', models.DateTimeField(auto_now_add=True, db_column='CreateTime', null=True, verbose_name='创建时间')),
                ('updatetime', models.DateTimeField(auto_now=True, db_column='UpdateTime', null=True, verbose_name='更新时间')),
                ('updateuser', maindb.create_user.UpdateUserField(blank=True, db_column='UpdateUser', null=True, verbose_name='更新人')),
                ('sportimg_s', maindb.cus_models_fields.CusPictureField(blank=True, db_column='SportImg_S', max_length=255, null=True, verbose_name='小图')),
                ('sportimg_m', maindb.cus_models_fields.CusPictureField(blank=True, db_column='SportImg_M', max_length=255, null=True, verbose_name='中图')),
                ('sportimg_l', maindb.cus_models_fields.CusPictureField(blank=True, db_column='SportImg_L', max_length=255, null=True, verbose_name='大图')),
                ('new', models.BooleanField(db_column='New', verbose_name='最新上线')),
            ],
            options={
                'db_table': 'TB_SportTypes',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbTeams',
            fields=[
                ('tid', models.BigAutoField(db_column='Tid', primary_key=True, serialize=False)),
                ('zhname', models.CharField(blank=True, db_column='ZHName', max_length=50, verbose_name='中文名称')),
                ('enname', models.CharField(db_column='ENName', max_length=50, verbose_name='英文名称')),
                ('icon', models.CharField(blank=True, db_column='Icon', max_length=200, null=True, verbose_name='球队Icon')),
                ('country', models.CharField(blank=True, db_column='Country', max_length=20, verbose_name='国家')),
                ('leaguename', models.CharField(blank=True, db_column='LeagueName', max_length=30, verbose_name='联赛')),
                ('status', models.IntegerField(blank=True, choices=[(0, '初始'), (1, '人工')], db_column='Status', default=0)),
                ('saenname', models.CharField(blank=True, db_column='SAEnName', max_length=50, null=True, verbose_name='SA英文名称 ')),
            ],
            options={
                'db_table': 'TB_Teams',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbTeamsBasketball',
            fields=[
                ('tid', models.BigAutoField(db_column='Tid', primary_key=True, serialize=False)),
                ('zhname', models.CharField(blank=True, db_column='ZHName', max_length=50, verbose_name='中文名称')),
                ('enname', models.CharField(db_column='ENName', max_length=50, verbose_name='英文名称')),
                ('icon', models.CharField(blank=True, db_column='Icon', max_length=200, null=True, verbose_name='球队Icon')),
                ('country', models.CharField(blank=True, db_column='Country', max_length=20, verbose_name='国家')),
                ('leaguename', models.CharField(blank=True, db_column='LeagueName', max_length=30, verbose_name='联赛')),
                ('status', models.IntegerField(blank=True, choices=[(0, '初始'), (1, '人工')], db_column='Status', default=0)),
                ('saenname', models.CharField(blank=True, db_column='SAEnName', max_length=50, null=True, verbose_name='SA英文名称 ')),
            ],
            options={
                'db_table': 'TB_Teams_Basketball',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbTemplate',
            fields=[
                ('templateid', models.IntegerField(db_column='TemplateID', primary_key=True, serialize=False)),
                ('templatename', models.CharField(blank=True, db_column='TemplateName', max_length=100, null=True)),
            ],
            options={
                'db_table': 'TB_Template',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbTodolist',
            fields=[
                ('tid', models.BigAutoField(db_column='TID', primary_key=True, serialize=False)),
                ('category', models.IntegerField(choices=[(0, '未知'), (1, '结算相关'), (2, '结算提醒'), (100, '资金流')], db_column='Category', verbose_name='类别')),
                ('title', models.CharField(db_column='Title', max_length=200, verbose_name='标题')),
                ('content', models.CharField(db_column='Content', max_length=1000, verbose_name='内容')),
                ('status', models.IntegerField(choices=[(0, '未处理'), (1, '已处理')], db_column='Status', default=0, verbose_name='状态')),
                ('rfid', models.CharField(blank=True, db_column='RFID', max_length=100, null=True)),
                ('createtime', models.DateTimeField(auto_now_add=True, db_column='CreateTime', verbose_name='创建时间')),
                ('operateuser', maindb.create_user.UpdateUserField(db_column='OperateUserNo', verbose_name='操作人')),
                ('operatetime', models.DateTimeField(auto_now=True, db_column='OperateTime', null=True, verbose_name='更新时间')),
            ],
            options={
                'db_table': 'TB_ToDoList',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbTournamentLivebet',
            fields=[
                ('tournamentid', models.IntegerField(db_column='TournamentID', primary_key=True, serialize=False)),
                ('tournamentname', models.CharField(blank=True, db_column='TournamentName', max_length=1000, null=True)),
                ('categoryid', models.IntegerField(blank=True, db_column='CategoryID', null=True)),
                ('createtime', models.DateTimeField(blank=True, db_column='CreateTime', null=True)),
                ('uniquetournamentid', models.IntegerField(blank=True, db_column='UniqueTournamentID', null=True)),
                ('sportid', models.IntegerField(blank=True, db_column='SportID', null=True)),
                ('isfeedon', models.IntegerField(blank=True, db_column='IsFeedOn', null=True)),
                ('weights', models.FloatField(blank=True, db_column='Weights', null=True)),
                ('islivebet', models.IntegerField(blank=True, db_column='IsLiveBet', null=True)),
            ],
            options={
                'db_table': 'TB_Tournament_LiveBet',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbTrendstatistics',
            fields=[
                ('tid', models.BigAutoField(db_column='Tid', primary_key=True, serialize=False)),
                ('createtime', models.DateTimeField(db_column='CreateTime', verbose_name='时间')),
                ('betnum', models.BigIntegerField(db_column='BetNum', verbose_name='投注单数')),
                ('betamount', models.DecimalField(db_column='BetAmount', decimal_places=4, max_digits=18, verbose_name='投注金额')),
                ('finishbetamount', models.DecimalField(db_column='FinishBetAmount', decimal_places=4, max_digits=18, verbose_name='(已结算)投注金额')),
                ('turnover', models.DecimalField(db_column='Turnover', decimal_places=4, max_digits=18, verbose_name='流水')),
                ('betoutcome', models.DecimalField(db_column='BetOutCome', decimal_places=4, max_digits=18, verbose_name='派奖金额')),
                ('bonusamount', models.DecimalField(db_column='BonusAmount', decimal_places=4, max_digits=18, verbose_name='反水金额')),
                ('firstrechargeamount', models.DecimalField(db_column='FirstRechargeAmount', decimal_places=4, max_digits=18, verbose_name='首存金额')),
                ('secondrechargeamount', models.DecimalField(db_column='SecondRechargeAmount', decimal_places=4, max_digits=18, verbose_name='再存金额')),
                ('birthdayamount', models.DecimalField(db_column='BirthdayAmount', decimal_places=4, max_digits=18, verbose_name='生日礼金')),
                ('rescueamount', models.DecimalField(db_column='RescueAmount', decimal_places=4, max_digits=18)),
                ('deductionamount', models.DecimalField(db_column='DeductionAmount', decimal_places=4, max_digits=18, verbose_name='')),
                ('ddditionamount', models.DecimalField(db_column='DdditionAmount', decimal_places=4, max_digits=18)),
                ('ebankamount', models.DecimalField(db_column='EbankAmount', decimal_places=4, max_digits=18)),
                ('backendamount', models.DecimalField(db_column='BackendAmount', decimal_places=4, max_digits=18, verbose_name='礼金')),
                ('userprofit', models.DecimalField(db_column='UserProfit', decimal_places=4, max_digits=18, verbose_name='亏盈')),
                ('starttime', models.DateField(db_column='StartTime', help_text='db 是 Datetime', verbose_name='时间')),
                ('endtime', models.DateTimeField(db_column='EndTime')),
                ('activityamount', models.DecimalField(db_column='ActivityAmount', decimal_places=4, max_digits=18, verbose_name='活动+调整')),
                ('rechargeamount', models.DecimalField(db_column='RechargeAmount', decimal_places=4, max_digits=18, verbose_name='充值金额')),
                ('withdrawamount', models.DecimalField(db_column='WithdrawAmount', decimal_places=4, max_digits=18, verbose_name='提现金额')),
                ('betusernum', models.IntegerField(db_column='BetUserNum', verbose_name='投注人数')),
                ('newusernum', models.IntegerField(db_column='NewUserNum', verbose_name='注册人数')),
                ('withdrawusernum', models.IntegerField(db_column='WithdrawUserNum', verbose_name='提现人数')),
                ('rechargeusernum', models.IntegerField(db_column='RechargeUserNum', verbose_name='充值人数')),
                ('loginusernum', models.IntegerField(db_column='LoginUserNum', verbose_name='登录用户数')),
                ('rechargeonsignindaynum', models.IntegerField(db_column='RechargeOnSignInDayNum', verbose_name='每日首冲')),
            ],
            options={
                'db_table': 'TB_TrendStatistics',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbUserConst',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('nickname', models.CharField(db_column='NickName', max_length=100, verbose_name='昵称')),
                ('avatar', maindb.cus_models_fields.CusPictureField(blank=True, db_column='Avatar', max_length=512, null=True, verbose_name='头像')),
            ],
            options={
                'db_table': 'TB_User_Const',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbUserex',
            fields=[
                ('userid', models.IntegerField(db_column='UserID', primary_key=True, serialize=False, verbose_name='账号')),
                ('extnumber', models.CharField(blank=True, db_column='ExtNumber', max_length=50, null=True, verbose_name='分机号')),
                ('usedpassword', models.CharField(blank=True, db_column='UsedPassword', max_length=1000, null=True)),
                ('passwordexpiretime', models.DateTimeField(blank=True, db_column='PasswordExpireTime', null=True, verbose_name='密码过期')),
            ],
            options={
                'db_table': 'TB_UserEx',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbUserLog',
            fields=[
                ('id', models.BigAutoField(db_column='Id', primary_key=True, serialize=False)),
                ('bid', models.CharField(db_column='BId', max_length=64)),
                ('ipaddress', models.CharField(db_column='IpAddress', max_length=16, verbose_name='IP地址')),
                ('operatetype', models.IntegerField(choices=[(1, '下注'), (2, '充值'), (3, '登录'), (4, '注册')], db_column='OperateType', verbose_name='操作类型')),
                ('deviceid', models.CharField(blank=True, db_column='DeviceId', max_length=255, null=True, verbose_name='设备ID')),
                ('terminal', models.IntegerField(choices=[(1, 'iOS'), (2, 'Android'), (3, 'H5'), (4, 'PC')], db_column='Terminal', verbose_name='终端')),
                ('area', models.CharField(blank=True, db_column='Area', max_length=255, null=True, verbose_name='区域')),
                ('arearemark', models.CharField(blank=True, db_column='AreaRemark', max_length=255, null=True, verbose_name='区域标记')),
                ('createtime', models.DateTimeField(db_column='CreateTime', verbose_name='创建时间')),
            ],
            options={
                'db_table': 'TB_User_Log',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbUserRank',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('type', models.IntegerField(choices=[(1, '盈利榜'), (2, '大奖榜'), (3, '胜率榜')], db_column='Type', verbose_name='榜单')),
                ('period', models.IntegerField(choices=[(1, '日'), (2, '周'), (4, '月')], db_column='Period', verbose_name='周期')),
                ('enabled', models.BooleanField(db_column='Enabled', default=1, verbose_name='启用')),
                ('value', helpers.director.model_func.cus_fields.cus_decimal.CusDecimalField(db_column='Value', decimal_places=4, max_digits=18, verbose_name='数值')),
            ],
            options={
                'db_table': 'TB_User_Rank',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbWhiteiprangelist',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False, verbose_name='编号')),
                ('startip', models.CharField(blank=True, db_column='StartIp', max_length=16, null=True, verbose_name='开始IP')),
                ('startipnum', models.BigIntegerField(blank=True, db_column='StartIpNum', null=True)),
                ('endip', models.CharField(blank=True, db_column='EndIp', max_length=16, null=True, verbose_name='结束IP')),
                ('endipnum', models.BigIntegerField(blank=True, db_column='EndIpNum', null=True)),
                ('iswork', models.BooleanField(db_column='IsWork', default=True, verbose_name='状态')),
                ('type', models.IntegerField(blank=True, choices=[(0, '登录'), (1, '充值')], db_column='Type', default=0, null=True, verbose_name='类型')),
            ],
            options={
                'db_table': 'TB_WhiteIpRangeList',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbWithdraw',
            fields=[
                ('withdrawid', models.AutoField(db_column='WithdrawId', primary_key=True, serialize=False, verbose_name='记录ID')),
                ('amount', models.DecimalField(db_column='Amount', decimal_places=2, max_digits=18, verbose_name='金额')),
                ('orderid', models.CharField(db_column='OrderID', max_length=50, verbose_name='订单号')),
                ('account', models.CharField(db_column='Account', max_length=50)),
                ('createtime', models.DateTimeField(db_column='CreateTime', verbose_name='创建时间')),
                ('bankcardid', models.IntegerField(db_column='BankCardId')),
                ('memo', models.CharField(blank=True, db_column='Memo', max_length=500, null=True, verbose_name='备注')),
                ('status', models.IntegerField(choices=[(1, '处理中'), (2, '成功'), (3, '失败'), (4, '异常'), (5, '已退款')], db_column='Status')),
                ('apollomsg', models.CharField(blank=True, db_column='ApolloMsg', max_length=100, null=True)),
                ('apollocode', models.CharField(blank=True, db_column='ApolloCode', max_length=100, null=True)),
                ('amounttype', models.IntegerField(choices=[(1, '余额'), (2, '佣金')], db_column='AmountType', verbose_name='类型')),
                ('confirmtime', models.DateTimeField(blank=True, db_column='ConfirmTime', null=True, verbose_name='处理时间')),
            ],
            options={
                'db_table': 'TB_Withdraw',
                'managed': False,
            },
        ),
        migrations.AlterModelTable(
            name='blackiprangelist',
            table='TB_BlackIpRangeList',
        ),
        migrations.AlterModelTable(
            name='whiteiplist',
            table='TB_WhiteIpList',
        ),
        migrations.AlterModelTable(
            name='whiteuserlist',
            table='TB_WhiteUserList',
        ),
    ]
