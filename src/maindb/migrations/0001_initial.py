# -*- coding: utf-8 -*-
# Generated by Django 1.11.13 on 2018-05-29 16:09
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion
import helpers.director.model_func.cus_fields.cus_decimal
import maindb.cus_models_fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Blackiplist',
            fields=[
                ('blackiplistid', models.AutoField(db_column='BlackIpListID', primary_key=True, serialize=False)),
                ('ip', models.CharField(db_column='Ip', max_length=16)),
                ('remark', models.CharField(db_column='Remark', max_length=200)),
                ('iswork', models.BooleanField(db_column='IsWork')),
                ('itype', models.IntegerField(db_column='IType')),
                ('username', models.CharField(blank=True, db_column='UserName', max_length=50, null=True)),
            ],
            options={
                'db_table': 'BlackIpList',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Blackiprangelist',
            fields=[
                ('blackiprangelistid', models.AutoField(db_column='BlackIpRangeListID', primary_key=True, serialize=False, verbose_name='序号')),
                ('startip', models.CharField(db_column='StartIp', max_length=16, verbose_name='开始IP')),
                ('startipnum', models.BigIntegerField(db_column='StartIpNum', verbose_name='StartIpNum')),
                ('endip', models.CharField(db_column='EndIp', max_length=16, verbose_name='结束IP')),
                ('endipnum', models.BigIntegerField(db_column='EndIpNum', verbose_name='EndIpNum')),
                ('remark', models.CharField(db_column='Remark', max_length=200, verbose_name='备注')),
                ('iswork', models.BooleanField(db_column='IsWork', verbose_name='是否有效')),
                ('area', models.CharField(db_column='Area', max_length=255, verbose_name='区域')),
            ],
            options={
                'db_table': 'BlackIpRangeList',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbAccount',
            fields=[
                ('accountid', models.AutoField(db_column='AccountID', primary_key=True, serialize=False, verbose_name='账号ID')),
                ('accounttype', models.SmallIntegerField(choices=[(1, '会员'), (2, '代理')], db_column='AccountType', verbose_name='账号类型')),
                ('account', models.CharField(db_column='Account', max_length=255)),
                ('password', models.CharField(db_column='Password', max_length=32)),
                ('username', models.CharField(blank=True, db_column='UserName', max_length=100, null=True, verbose_name='用户名')),
                ('userrealname', models.CharField(blank=True, db_column='UserRealName', max_length=200, null=True)),
                ('status', models.SmallIntegerField(db_column='Status')),
                ('verify', models.SmallIntegerField(db_column='Verify')),
                ('agent', models.CharField(blank=True, db_column='Agent', max_length=20, null=True)),
                ('viplv', models.SmallIntegerField(db_column='VIPLv', verbose_name='VIP等级')),
                ('createtime', models.DateTimeField(db_column='CreateTime', verbose_name='创建时间')),
                ('pwupdatetime', models.DateTimeField(db_column='PWUpdateTime')),
                ('amount', helpers.director.model_func.cus_fields.cus_decimal.CusDecimalField(db_column='Amount', decimal_places=4, max_digits=18, verbose_name='账号余额')),
                ('phone', models.CharField(blank=True, db_column='Phone', max_length=64, null=True)),
                ('avatar', models.CharField(db_column='Avatar', max_length=255)),
                ('gender', models.IntegerField(db_column='Gender')),
                ('birthday', models.CharField(blank=True, db_column='Birthday', max_length=10, null=True)),
                ('points', models.IntegerField(blank=True, db_column='Points', null=True)),
            ],
            options={
                'db_table': 'TB_Account',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbAccountMatchFav',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('accountid', models.IntegerField(db_column='AccountID')),
                ('matchid', models.BigIntegerField(db_column='MatchID')),
                ('createtime', models.DateTimeField(db_column='CreateTime')),
            ],
            options={
                'db_table': 'TB_Account_Match_Fav',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbActivity',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('cover', maindb.cus_models_fields.CusPictureField(blank=True, db_column='Cover', max_length=512, null=True)),
                ('zip', models.CharField(blank=True, db_column='Zip', max_length=512, null=True)),
                ('createuser', models.IntegerField(blank=True, db_column='CreateUser', null=True)),
                ('createtime', models.DateTimeField(auto_now_add=True, db_column='CreateTime')),
                ('status', models.IntegerField(choices=[(1, '启用'), (0, '离线')], db_column='Status', default=0, null=True)),
                ('priority', models.IntegerField(blank=True, db_column='Priority', null=True)),
            ],
            options={
                'db_table': 'TB_Activity',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbAppresource',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('name', models.CharField(db_column='Name', max_length=255)),
                ('url', maindb.cus_models_fields.CusFileField(db_column='Url', max_length=255)),
                ('isexpired', models.BooleanField(db_column='IsExpired')),
                ('md5', models.CharField(db_column='Md5', max_length=64)),
                ('remark', models.CharField(blank=True, db_column='Remark', max_length=255, null=True)),
                ('type', models.IntegerField(db_column='Type')),
            ],
            options={
                'db_table': 'TB_AppResource',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbAppversion',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('terminal', models.IntegerField(choices=[(1, 'IOS'), (2, 'Android')], db_column='Terminal')),
                ('packageurl', models.CharField(blank=True, db_column='PackageUrl', max_length=255, null=True)),
                ('md5', models.CharField(blank=True, db_column='Md5', max_length=32, null=True)),
                ('versionid', models.IntegerField(db_column='VersionId', default=0)),
                ('versionname', models.CharField(db_column='VersionName', max_length=64)),
                ('description', models.CharField(blank=True, db_column='Description', max_length=512, null=True)),
                ('required', models.IntegerField(choices=[(0, '否'), (1, '是')], db_column='Required', default=0, verbose_name='强制更新')),
                ('size', models.FloatField(db_column='Size', default=0)),
                ('valid', models.BooleanField(db_column='Valid')),
            ],
            options={
                'db_table': 'Tb_AppVersion',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbAreacitycode',
            fields=[
                ('areacitycodeid', models.AutoField(db_column='AreaCityCodeID', primary_key=True, serialize=False)),
                ('cityid', models.IntegerField(db_column='CityId')),
                ('areaid', models.IntegerField(db_column='AreaId')),
                ('cityname', models.CharField(db_column='CityName', max_length=30)),
            ],
            options={
                'db_table': 'TB_AreaCityCode',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbAreacode',
            fields=[
                ('areaid', models.IntegerField(db_column='AreaId', primary_key=True, serialize=False)),
                ('areaname', models.CharField(db_column='AreaName', max_length=30)),
            ],
            options={
                'db_table': 'TB_AreaCode',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbBalance',
            fields=[
                ('account', models.CharField(db_column='Account', max_length=20)),
                ('amount', helpers.director.model_func.cus_fields.cus_decimal.CusDecimalField(db_column='Amount', decimal_places=4, max_digits=18)),
                ('accountid', models.BigIntegerField(db_column='AccountID', primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'TB_Balance',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbBalancelog',
            fields=[
                ('tid', models.AutoField(db_column='Tid', primary_key=True, serialize=False)),
                ('account', models.CharField(db_column='Account', max_length=20, verbose_name='账号')),
                ('categoryid', models.IntegerField(choices=[(20002, '派彩')], db_column='CategoryID', verbose_name='类型')),
                ('cashflow', models.SmallIntegerField(db_column='CashFlow')),
                ('beforeamount', helpers.director.model_func.cus_fields.cus_decimal.CusDecimalField(db_column='BeforeAmount', decimal_places=4, max_digits=18, verbose_name='变动前金额')),
                ('amount', helpers.director.model_func.cus_fields.cus_decimal.CusDecimalField(db_column='Amount', decimal_places=4, max_digits=18, verbose_name='变动金额')),
                ('afteramount', helpers.director.model_func.cus_fields.cus_decimal.CusDecimalField(db_column='AfterAmount', decimal_places=4, max_digits=18, verbose_name='变动后金额')),
                ('memo', models.CharField(blank=True, db_column='Memo', max_length=50, null=True, verbose_name='备注')),
                ('createtime', models.DateTimeField(db_column='CreateTime', verbose_name='变更时间')),
                ('creater', models.CharField(blank=True, db_column='Creater', max_length=20, null=True, verbose_name='操作员')),
                ('accountid', models.IntegerField(db_column='AccountID')),
            ],
            options={
                'db_table': 'TB_BalanceLog',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbBankcards',
            fields=[
                ('tid', models.AutoField(db_column='Tid', primary_key=True, serialize=False)),
                ('cardno', models.CharField(db_column='CardNo', max_length=200)),
                ('status', models.SmallIntegerField(db_column='Status')),
                ('banktypeid', models.IntegerField(db_column='BankTypeID')),
                ('areaid', models.IntegerField(db_column='AreaID')),
                ('cityid', models.IntegerField(db_column='CityID')),
                ('phoneno', models.CharField(db_column='PhoneNo', max_length=200)),
                ('branchaddr', models.CharField(db_column='BranchAddr', max_length=100)),
                ('createtime', models.DateTimeField(db_column='CreateTime')),
                ('lastusetime', models.DateTimeField(blank=True, db_column='LastUseTime', null=True)),
            ],
            options={
                'db_table': 'TB_BankCards',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbBanktype',
            fields=[
                ('banktypeid', models.IntegerField(db_column='BankTypeID', primary_key=True, serialize=False)),
                ('banktypename', models.CharField(blank=True, db_column='BankTypeName', max_length=50, null=True)),
                ('moneyintype', models.IntegerField(blank=True, db_column='MoneyInType', null=True)),
            ],
            options={
                'db_table': 'TB_BankType',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbBanner',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('title', models.CharField(blank=True, db_column='Title', max_length=255, null=True)),
                ('picturename', maindb.cus_models_fields.CusPictureField(db_column='PictureName', max_length=255, verbose_name='图片名称')),
                ('order', models.IntegerField(db_column='Order', verbose_name='优先级')),
                ('createtime', models.DateTimeField(auto_now=True, db_column='CreateTime')),
                ('createuser', models.IntegerField(blank=True, db_column='CreateUser', null=True)),
                ('description', models.CharField(blank=True, db_column='Description', max_length=1024, null=True)),
                ('status', models.IntegerField(choices=[(1, '启用'), (0, '离线')], db_column='Status', default=0, null=True, verbose_name='状态')),
                ('navigateurl', models.CharField(blank=True, db_column='NavigateUrl', max_length=512, null=True, verbose_name='导航地址')),
            ],
            options={
                'db_table': 'TB_Banner',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbBetstopreason',
            fields=[
                ('reasonid', models.IntegerField(db_column='ReasonID', primary_key=True, serialize=False)),
                ('reason', models.CharField(db_column='Reason', max_length=100)),
                ('dangerousstatus', models.SmallIntegerField(db_column='DangerousStatus')),
            ],
            options={
                'db_table': 'TB_BetStopReason',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbBlackuserlist',
            fields=[
                ('blackuserlistid', models.AutoField(db_column='BlackUserListID', primary_key=True, serialize=False)),
                ('accountid', models.IntegerField(db_column='AccountID')),
                ('accounttype', models.SmallIntegerField(blank=True, db_column='AccountType', null=True)),
                ('account', models.CharField(db_column='Account', max_length=20)),
                ('username', models.CharField(blank=True, db_column='UserName', max_length=50, null=True)),
                ('reason', models.CharField(db_column='Reason', max_length=100)),
                ('addtime', models.DateTimeField(blank=True, db_column='AddTime', null=True)),
                ('ban_status', models.SmallIntegerField(blank=True, db_column='Ban_Status', null=True)),
            ],
            options={
                'db_table': 'TB_BlackUserList',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbBlackuserlistLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('blacklogid', models.IntegerField(db_column='BlackLogID')),
                ('reason', models.CharField(blank=True, db_column='Reason', max_length=100, null=True)),
                ('addtime', models.DateTimeField(blank=True, db_column='AddTime', null=True)),
                ('before_ban_status', models.SmallIntegerField(blank=True, db_column='Before_Ban_Status', null=True)),
                ('alter_ban_status', models.SmallIntegerField(blank=True, db_column='Alter_Ban_Status', null=True)),
                ('modify_user', models.CharField(blank=True, db_column='Modify_user', max_length=20, null=True)),
            ],
            options={
                'db_table': 'TB_BlackUserList_Log',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbCategory',
            fields=[
                ('categoryid', models.IntegerField(db_column='CategoryID', primary_key=True, serialize=False)),
                ('categoryname', models.CharField(db_column='CategoryName', max_length=200)),
                ('sportid', models.IntegerField(blank=True, db_column='SportID', null=True)),
            ],
            options={
                'db_table': 'TB_Category',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbChannel',
            fields=[
                ('channelid', models.IntegerField(db_column='ChannelID', primary_key=True, serialize=False, verbose_name='渠道ID')),
                ('channel', models.IntegerField(db_column='Channel', max_length=40, unique=True, verbose_name='金流渠道')),
                ('channelname', models.CharField(db_column='ChannelName', max_length=30, verbose_name='渠道名称')),
                ('maxlimit', helpers.director.model_func.cus_fields.cus_decimal.CusDecimalField(db_column='MaxLimit', decimal_places=4, max_digits=18, verbose_name='最大限额')),
                ('minlimit', helpers.director.model_func.cus_fields.cus_decimal.CusDecimalField(db_column='MinLimit', decimal_places=4, max_digits=18, verbose_name='最小限额')),
                ('grouptitle', models.CharField(db_column='GroupTitle', max_length=20, verbose_name='组名')),
                ('status', models.SmallIntegerField(choices=[(0, 'close'), (1, 'open')], db_column='Status', default=0, verbose_name='状态')),
                ('terminal', models.IntegerField(db_column='Terminal')),
            ],
            options={
                'db_table': 'TB_Channel',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbChargeflow',
            fields=[
                ('id', models.BigIntegerField(db_column='Id', primary_key=True, serialize=False, verbose_name='序号')),
                ('productid', models.IntegerField(db_column='ProductId', verbose_name='产品序号')),
                ('createtime', models.CharField(db_column='CreateTime', max_length=27, verbose_name='创建时间')),
                ('callbacktime', models.CharField(blank=True, db_column='CallbackTime', max_length=27, null=True, verbose_name='回调时间')),
                ('amount', models.IntegerField(db_column='Amount', verbose_name='数量')),
                ('success', models.IntegerField(db_column='Success', verbose_name='成功')),
                ('credential', models.CharField(db_column='Credential', max_length=2048, verbose_name='Credential')),
                ('error', models.CharField(blank=True, db_column='Error', max_length=4096, null=True)),
                ('providerid', models.CharField(blank=True, db_column='ProviderId', max_length=64, null=True)),
                ('currency', helpers.director.model_func.cus_fields.cus_decimal.CusDecimalField(db_column='Currency', decimal_places=0, max_digits=18, verbose_name='金币')),
                ('remark', models.CharField(blank=True, db_column='Remark', max_length=255, null=True, verbose_name='备注')),
            ],
            options={
                'db_table': 'TB_ChargeFlow',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbCitycode',
            fields=[
                ('areaid', models.IntegerField(db_column='AreaId', primary_key=True, serialize=False)),
                ('areaname', models.CharField(db_column='AreaName', max_length=30)),
            ],
            options={
                'db_table': 'TB_CityCode',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbCompetitors',
            fields=[
                ('tb_competitorsid', models.AutoField(db_column='TB_CompetitorsId', primary_key=True, serialize=False)),
                ('id', models.BigIntegerField(db_column='ID')),
                ('superid', models.BigIntegerField(db_column='SuperID')),
                ('competitorbet', models.CharField(db_column='CompetitorBet', max_length=100)),
                ('competitorzh', models.CharField(db_column='CompetitorZh', max_length=100)),
                ('createtime', models.DateTimeField(db_column='CreateTime')),
            ],
            options={
                'db_table': 'TB_Competitors',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbConcurrentusers',
            fields=[
                ('concurrentusersid', models.AutoField(db_column='ConcurrentUsersId', primary_key=True, serialize=False)),
                ('regdate', models.CharField(db_column='RegDate', max_length=10)),
                ('servername', models.CharField(db_column='ServerName', max_length=32)),
                ('total', models.IntegerField(db_column='Total')),
                ('h00', models.IntegerField(db_column='H00')),
                ('h01', models.IntegerField(db_column='H01')),
                ('h02', models.IntegerField(db_column='H02')),
                ('h03', models.IntegerField(db_column='H03')),
                ('h04', models.IntegerField(db_column='H04')),
                ('h05', models.IntegerField(db_column='H05')),
                ('h06', models.IntegerField(db_column='H06')),
                ('h07', models.IntegerField(db_column='H07')),
                ('h08', models.IntegerField(db_column='H08')),
                ('h09', models.IntegerField(db_column='H09')),
                ('h10', models.IntegerField(db_column='H10')),
                ('h11', models.IntegerField(db_column='H11')),
                ('h12', models.IntegerField(db_column='H12')),
                ('h13', models.IntegerField(db_column='H13')),
                ('h14', models.IntegerField(db_column='H14')),
                ('h15', models.IntegerField(db_column='H15')),
                ('h16', models.IntegerField(db_column='H16')),
                ('h17', models.IntegerField(db_column='H17')),
                ('h18', models.IntegerField(db_column='H18')),
                ('h19', models.IntegerField(db_column='H19')),
                ('h20', models.IntegerField(db_column='H20')),
                ('h21', models.IntegerField(db_column='H21')),
                ('h22', models.IntegerField(db_column='H22')),
                ('h23', models.IntegerField(db_column='H23')),
                ('hn00', models.IntegerField(db_column='HN00')),
                ('hn01', models.IntegerField(db_column='HN01')),
                ('hn02', models.IntegerField(db_column='HN02')),
                ('hn03', models.IntegerField(db_column='HN03')),
                ('hn04', models.IntegerField(db_column='HN04')),
                ('hn05', models.IntegerField(db_column='HN05')),
                ('hn06', models.IntegerField(db_column='HN06')),
                ('hn07', models.IntegerField(db_column='HN07')),
                ('hn08', models.IntegerField(db_column='HN08')),
                ('hn09', models.IntegerField(db_column='HN09')),
                ('hn10', models.IntegerField(db_column='HN10')),
                ('hn11', models.IntegerField(db_column='HN11')),
                ('hn12', models.IntegerField(db_column='HN12')),
                ('hn13', models.IntegerField(db_column='HN13')),
                ('hn14', models.IntegerField(db_column='HN14')),
                ('hn15', models.IntegerField(db_column='HN15')),
                ('hn16', models.IntegerField(db_column='HN16')),
                ('hn17', models.IntegerField(db_column='HN17')),
                ('hn18', models.IntegerField(db_column='HN18')),
                ('hn19', models.IntegerField(db_column='HN19')),
                ('hn20', models.IntegerField(db_column='HN20')),
                ('hn21', models.IntegerField(db_column='HN21')),
                ('hn22', models.IntegerField(db_column='HN22')),
                ('hn23', models.IntegerField(db_column='HN23')),
                ('hl00', models.IntegerField(db_column='HL00')),
                ('hl01', models.IntegerField(db_column='HL01')),
                ('hl02', models.IntegerField(db_column='HL02')),
                ('hl03', models.IntegerField(db_column='HL03')),
                ('hl04', models.IntegerField(db_column='HL04')),
                ('hl05', models.IntegerField(db_column='HL05')),
                ('hl06', models.IntegerField(db_column='HL06')),
                ('hl07', models.IntegerField(db_column='HL07')),
                ('hl08', models.IntegerField(db_column='HL08')),
                ('hl09', models.IntegerField(db_column='HL09')),
                ('hl10', models.IntegerField(db_column='HL10')),
                ('hl11', models.IntegerField(db_column='HL11')),
                ('hl12', models.IntegerField(db_column='HL12')),
                ('hl13', models.IntegerField(db_column='HL13')),
                ('hl14', models.IntegerField(db_column='HL14')),
                ('hl15', models.IntegerField(db_column='HL15')),
                ('hl16', models.IntegerField(db_column='HL16')),
                ('hl17', models.IntegerField(db_column='HL17')),
                ('hl18', models.IntegerField(db_column='HL18')),
                ('hl19', models.IntegerField(db_column='HL19')),
                ('hl20', models.IntegerField(db_column='HL20')),
                ('hl21', models.IntegerField(db_column='HL21')),
                ('hl22', models.IntegerField(db_column='HL22')),
                ('hl23', models.IntegerField(db_column='HL23')),
            ],
            options={
                'db_table': 'TB_ConcurrentUsers',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbConcurrentuserscount',
            fields=[
                ('concurrentuserscountid', models.AutoField(db_column='ConcurrentUsersCountId', primary_key=True, serialize=False)),
                ('servername', models.CharField(db_column='ServerName', max_length=32)),
                ('count', models.IntegerField(db_column='Count')),
                ('createtime', models.DateTimeField(db_column='CreateTime')),
            ],
            options={
                'db_table': 'TB_ConcurrentUsersCount',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbContacts',
            fields=[
                ('contactsid', models.AutoField(db_column='ContactsId', primary_key=True, serialize=False)),
                ('accountid', models.IntegerField(db_column='AccountId')),
                ('contactaccountid', models.IntegerField(db_column='ContactAccountId')),
                ('commonlyused', models.BooleanField(db_column='CommonlyUsed')),
                ('blacklist', models.BooleanField(db_column='Blacklist')),
                ('sticky', models.BooleanField(db_column='Sticky')),
                ('status', models.SmallIntegerField(db_column='Status')),
                ('createtime', models.DateTimeField(db_column='CreateTime')),
                ('updatetime', models.DateTimeField(db_column='UpdateTime')),
                ('memo', models.CharField(db_column='Memo', max_length=128)),
            ],
            options={
                'db_table': 'TB_Contacts',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbCurrency',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('price', models.IntegerField(db_column='Price')),
                ('value', helpers.director.model_func.cus_fields.cus_decimal.CusDecimalField(db_column='Value', decimal_places=0, max_digits=18)),
                ('description', models.CharField(blank=True, db_column='Description', max_length=255, null=True)),
                ('icon', maindb.cus_models_fields.CusPictureField(blank=True, db_column='Icon', max_length=255, null=True)),
            ],
            options={
                'db_table': 'TB_Currency',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbD9Userhttpreferer',
            fields=[
                ('d9userhttprefererid', models.AutoField(db_column='D9UserHttpRefererID', primary_key=True, serialize=False)),
                ('type', models.CharField(db_column='Type', max_length=12)),
                ('referrer', models.CharField(db_column='Referrer', max_length=512)),
                ('ip', models.CharField(db_column='IP', max_length=64)),
                ('createtime', models.DateTimeField(db_column='CreateTime')),
            ],
            options={
                'db_table': 'TB_D9UserHttpReferer',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbEventbonusLog',
            fields=[
                ('tid', models.AutoField(db_column='Tid', primary_key=True, serialize=False)),
                ('eventid', models.IntegerField(db_column='EventID')),
                ('totalturnover', helpers.director.model_func.cus_fields.cus_decimal.CusDecimalField(db_column='TotalTurnover', decimal_places=4, max_digits=18)),
                ('nowturnover', helpers.director.model_func.cus_fields.cus_decimal.CusDecimalField(db_column='NowTurnover', decimal_places=4, max_digits=18)),
                ('bonus', helpers.director.model_func.cus_fields.cus_decimal.CusDecimalField(db_column='Bonus', decimal_places=4, max_digits=18)),
                ('addwithdrawlimit', helpers.director.model_func.cus_fields.cus_decimal.CusDecimalField(db_column='AddWithdrawLimit', decimal_places=4, max_digits=18)),
                ('memo', models.CharField(db_column='Memo', max_length=50)),
                ('createtime', models.DateTimeField(db_column='CreateTime')),
                ('validtime', models.DateTimeField(db_column='ValidTime')),
                ('gifttime', models.DateTimeField(db_column='GiftTime')),
            ],
            options={
                'db_table': 'TB_EventBonus_Log',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbEventbonustList',
            fields=[
                ('eventid', models.IntegerField(db_column='EventID', primary_key=True, serialize=False)),
                ('starttime', models.DateTimeField(db_column='StartTime')),
                ('endtime', models.DateTimeField(db_column='EndTime')),
                ('eventname', models.CharField(db_column='EventName', max_length=20)),
                ('bonuspa', helpers.director.model_func.cus_fields.cus_decimal.CusDecimalField(db_column='BonusPa', decimal_places=4, max_digits=18)),
                ('maxbonus', helpers.director.model_func.cus_fields.cus_decimal.CusDecimalField(db_column='MaxBonus', decimal_places=4, max_digits=18)),
                ('turnovermultiple', helpers.director.model_func.cus_fields.cus_decimal.CusDecimalField(db_column='TurnoverMultiple', decimal_places=2, max_digits=18)),
                ('withdrawlimitmultiple', helpers.director.model_func.cus_fields.cus_decimal.CusDecimalField(db_column='WithdrawlimitMultiple', decimal_places=2, max_digits=18)),
                ('validdays', models.IntegerField(db_column='ValidDays')),
                ('memo', models.CharField(db_column='Memo', max_length=100)),
                ('moneycategory', models.IntegerField(db_column='MoneyCategory')),
                ('status', models.BooleanField(db_column='Status')),
                ('multiplereceive', models.BooleanField(db_column='MultipleReceive')),
                ('createtime', models.DateTimeField(db_column='CreateTime')),
                ('createuser', models.CharField(db_column='CreateUser', max_length=20)),
                ('updatetime', models.DateTimeField(db_column='UpdateTime')),
                ('updateuser', models.CharField(db_column='UpdateUser', max_length=40)),
            ],
            options={
                'db_table': 'TB_EventBonust_List',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbIpdata',
            fields=[
                ('ipdataid', models.AutoField(db_column='IpDataID', primary_key=True, serialize=False)),
                ('startip', models.CharField(db_column='StartIP', max_length=16)),
                ('sartipnum', models.BigIntegerField(db_column='SartIPNum')),
                ('endip', models.CharField(db_column='EndIP', max_length=16)),
                ('endipnum', models.BigIntegerField(db_column='EndIPNum')),
                ('area', models.CharField(db_column='Area', max_length=128)),
                ('remark', models.CharField(db_column='Remark', max_length=512)),
            ],
            options={
                'db_table': 'TB_IpData',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbLoginlog',
            fields=[
                ('id', models.BigAutoField(db_column='Id', primary_key=True, serialize=False)),
                ('devicecode', models.CharField(db_column='DeviceCode', max_length=40, verbose_name='设备码')),
                ('deviceip', models.CharField(db_column='DeviceIP', max_length=20, verbose_name='设备IP')),
                ('ternimal', models.IntegerField(db_column='Ternimal', verbose_name='平台')),
                ('createtime', models.DateTimeField(db_column='CreateTime', verbose_name='登录时间')),
                ('appversion', models.CharField(blank=True, db_column='AppVersion', max_length=20, null=True, verbose_name='设备版本')),
                ('devicename', models.CharField(blank=True, db_column='DeviceName', max_length=40, null=True)),
                ('deviceversion', models.CharField(blank=True, db_column='DeviceVersion', max_length=20, null=True)),
                ('logintype', models.IntegerField(db_column='LoginType')),
            ],
            options={
                'db_table': 'TB_LoginLog',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbMaintournament',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uniquetournamentid', models.IntegerField(db_column='UniqueTournamentID')),
                ('sportid', models.IntegerField(db_column='SportID')),
                ('categoryid', models.IntegerField(db_column='CategoryID')),
                ('name', models.CharField(db_column='Name', max_length=128)),
                ('createtimne', models.DateTimeField(db_column='CreateTimne')),
            ],
            options={
                'db_table': 'TB_MainTournament',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbMatches',
            fields=[
                ('tid', models.AutoField(db_column='Tid', primary_key=True, serialize=False)),
                ('sportid', models.IntegerField(db_column='SportID')),
                ('categoryid', models.IntegerField(db_column='CategoryID', verbose_name='比赛种类')),
                ('tournamentid', models.IntegerField(db_column='TournamentID')),
                ('tournamentzh', models.CharField(db_column='TournamentZH', max_length=50, verbose_name='联赛名')),
                ('matchid', models.IntegerField(db_column='MatchID', unique=True)),
                ('prematchdate', models.DateTimeField(db_column='PreMatchDate')),
                ('matchdate', models.DateTimeField(db_column='MatchDate', verbose_name='比赛日期')),
                ('currentperiodstart', models.DateTimeField(blank=True, db_column='CurrentPeriodStart', null=True, verbose_name='CurrentPeriodStart')),
                ('team1id', models.IntegerField(db_column='Team1ID')),
                ('superteam1id', models.BigIntegerField(db_column='SuperTeam1Id')),
                ('team1zh', models.CharField(db_column='Team1ZH', max_length=20, verbose_name='主队')),
                ('team2id', models.IntegerField(db_column='Team2ID')),
                ('superteam2id', models.BigIntegerField(db_column='SuperTeam2Id')),
                ('team2zh', models.CharField(db_column='Team2ZH', max_length=20, verbose_name='客队')),
                ('matchscore', models.CharField(blank=True, db_column='MatchScore', max_length=8, verbose_name='比分')),
                ('winner', models.IntegerField(db_column='Winner', verbose_name='获胜者')),
                ('statuscode', models.IntegerField(db_column='StatusCode', verbose_name='状态')),
                ('roundinfo', models.IntegerField(db_column='RoundInfo', verbose_name='轮')),
                ('isrecommend', models.BooleanField(db_column='IsRecommend', verbose_name='推荐')),
                ('livebet', models.BooleanField(db_column='LiveBet', verbose_name='滚球')),
                ('generatedat', models.DateTimeField(db_column='GeneratedAt', verbose_name='创建时间')),
                ('createtime', models.DateTimeField(db_column='CreateTime')),
                ('weights', helpers.director.model_func.cus_fields.cus_decimal.CusDecimalField(db_column='Weights', decimal_places=2, max_digits=18)),
                ('uniquetournamentid', models.BigIntegerField(db_column='UniqueTournamentId')),
            ],
            options={
                'db_table': 'TB_Matches',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbMatchesBetstatus',
            fields=[
                ('tid', models.AutoField(db_column='Tid', primary_key=True, serialize=False)),
                ('matchid', models.BigIntegerField(db_column='MatchID')),
                ('betstatus', models.SmallIntegerField(db_column='BetStatus')),
                ('betstopreason', models.CharField(db_column='BetStopReason', max_length=50)),
                ('stopreasonid', models.IntegerField(db_column='StopReasonId')),
                ('stopreason', models.CharField(db_column='StopReason', max_length=50)),
                ('createtime', models.DateTimeField(db_column='CreateTime')),
                ('score', models.CharField(max_length=10)),
                ('redcardshome', models.IntegerField()),
                ('redcardsaway', models.IntegerField()),
            ],
            options={
                'db_table': 'TB_Matches_BetStatus',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbMatchesoddsswitch',
            fields=[
                ('matchesoddsswitchid', models.AutoField(db_column='MatchesOddsSwitchID', primary_key=True, serialize=False)),
                ('sportid', models.IntegerField(db_column='SportID', default=1)),
                ('types', models.IntegerField(blank=True, db_column='Types', null=True)),
                ('matchid', models.BigIntegerField(db_column='MatchID')),
                ('specialbetvalue', models.CharField(blank=True, db_column='SpecialBetValue', max_length=12, null=True)),
                ('status', models.IntegerField(db_column='Status')),
                ('createtime', models.DateTimeField(auto_now=True, db_column='CreateTime')),
                ('updatetime', models.DateTimeField(auto_now=True, db_column='UpdateTime')),
            ],
            options={
                'db_table': 'TB_MatchesOddsSwitch',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbMessages',
            fields=[
                ('messagesid', models.AutoField(db_column='MessagesId', primary_key=True, serialize=False)),
                ('accountid', models.IntegerField(db_column='AccountId')),
                ('spearkeraccountid', models.IntegerField(db_column='SpearkerAccountId')),
                ('spearkername', models.CharField(db_column='SpearkerName', max_length=10)),
                ('listeneraccountid', models.IntegerField(db_column='ListenerAccountId')),
                ('listenername', models.CharField(db_column='ListenerName', max_length=10)),
                ('body', models.CharField(db_column='Body', max_length=512)),
                ('haveread', models.BooleanField(db_column='HaveRead')),
                ('received', models.BooleanField(db_column='Received')),
                ('status', models.SmallIntegerField(db_column='Status')),
                ('createtime', models.DateTimeField(db_column='CreateTime')),
                ('updatetime', models.DateTimeField(db_column='UpdateTime')),
            ],
            options={
                'db_table': 'TB_Messages',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbMessageUnsend',
            fields=[
                ('tid', models.AutoField(db_column='Tid', primary_key=True, serialize=False)),
                ('body', models.CharField(db_column='Body', max_length=512)),
                ('type', models.SmallIntegerField(db_column='Type')),
                ('sender', models.CharField(db_column='Sender', max_length=20)),
                ('createtime', models.DateTimeField(db_column='CreateTime')),
                ('accountid', models.IntegerField(blank=True, db_column='AccountID', null=True)),
            ],
            options={
                'db_table': 'TB_Message_Unsend',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbMoneyCategories',
            fields=[
                ('balancecategoriesid', models.AutoField(db_column='BalanceCategoriesId', primary_key=True, serialize=False)),
                ('categoryid', models.IntegerField(db_column='CategoryID')),
                ('cashflow', models.SmallIntegerField(db_column='CashFlow')),
                ('categoryname', models.CharField(db_column='CategoryName', max_length=20)),
                ('categorytype', models.SmallIntegerField(db_column='CategoryType')),
            ],
            options={
                'db_table': 'TB_Money_Categories',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbNetworkerror',
            fields=[
                ('networkerrorid', models.AutoField(db_column='NetworkErrorID', primary_key=True, serialize=False)),
                ('clientip', models.CharField(db_column='ClientIp', max_length=64)),
                ('apiname', models.CharField(db_column='ApiName', max_length=128)),
                ('elapsedtime', models.IntegerField(db_column='ElapsedTime')),
                ('message', models.CharField(db_column='Message', max_length=1024)),
                ('sendtime', models.DateTimeField(db_column='SendTime')),
                ('createtime', models.DateTimeField(db_column='CreateTime')),
            ],
            options={
                'db_table': 'TB_NetworkError',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbNotice',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('title', models.CharField(db_column='Title', max_length=1024, null=True)),
                ('url', models.CharField(blank=True, db_column='Url', max_length=512, null=True)),
                ('createtime', models.DateTimeField(auto_now=True, db_column='CreateTime', verbose_name='修改时间')),
                ('createuser', models.IntegerField(blank=True, db_column='CreateUser', null=True)),
                ('status', models.IntegerField(blank=True, choices=[(1, '启用'), (0, '离线')], db_column='Status', null=True)),
                ('content', models.TextField(blank=True, db_column='Content', default='', null=True)),
            ],
            options={
                'db_table': 'TB_Notice',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbOdds',
            fields=[
                ('tid', models.AutoField(db_column='Tid', primary_key=True, serialize=False)),
                ('matchid', models.BigIntegerField(db_column='MatchID')),
                ('msgnr', models.BigIntegerField(db_column='MsgNr')),
                ('odds', helpers.director.model_func.cus_fields.cus_decimal.CusDecimalField(db_column='Odds', decimal_places=2, max_digits=18)),
                ('specialbetvalue', models.CharField(db_column='SpecialBetValue', max_length=12)),
                ('oddsid_ori', models.BigIntegerField(db_column='OddsID_ori')),
                ('source', models.SmallIntegerField(db_column='Source')),
                ('uptodate', models.SmallIntegerField(db_column='UpToDate')),
                ('status', models.SmallIntegerField(db_column='Status')),
                ('score', models.CharField(db_column='Score', max_length=8)),
                ('fortherest', models.CharField(db_column='ForTheRest', max_length=12)),
                ('createtime', models.DateTimeField(db_column='CreateTime')),
                ('updatetime', models.DateTimeField(db_column='UpdateTime')),
                ('optionzh', models.CharField(db_column='OptionZH', max_length=30)),
            ],
            options={
                'db_table': 'TB_Odds',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbOddsHistory',
            fields=[
                ('tid', models.AutoField(db_column='Tid', primary_key=True, serialize=False)),
                ('oddstid', models.BigIntegerField(db_column='OddsTid')),
                ('matchid', models.BigIntegerField(db_column='MatchID')),
                ('msgnr', models.BigIntegerField(db_column='MsgNr')),
                ('oddsid', models.BigIntegerField(db_column='OddsID')),
                ('odds', helpers.director.model_func.cus_fields.cus_decimal.CusDecimalField(db_column='Odds', decimal_places=2, max_digits=18)),
                ('specialbetvalue', models.CharField(db_column='SpecialBetValue', max_length=12)),
                ('oddsid_ori', models.BigIntegerField(db_column='OddsID_ori')),
                ('source', models.SmallIntegerField(db_column='Source')),
                ('uptodate', models.SmallIntegerField(db_column='UpToDate')),
                ('status', models.SmallIntegerField(db_column='Status')),
                ('score', models.CharField(db_column='Score', max_length=8)),
                ('fortherest', models.CharField(db_column='ForTheRest', max_length=12)),
                ('createtime', models.DateTimeField(db_column='CreateTime')),
                ('updatetime', models.DateTimeField(db_column='UpdateTime')),
                ('optionzh', models.CharField(db_column='OptionZH', max_length=30)),
            ],
            options={
                'db_table': 'TB_Odds_History',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbOddsResult',
            fields=[
                ('tid', models.AutoField(db_column='Tid', primary_key=True, serialize=False)),
                ('matchid', models.IntegerField(db_column='MatchID')),
                ('oddskind', models.SmallIntegerField(db_column='OddsKind')),
                ('oddsid', models.IntegerField(db_column='OddsID')),
                ('oddsid_ori', models.BigIntegerField(blank=True, db_column='OddsID_ori', null=True)),
                ('oddsoucome', models.CharField(db_column='OddsOucome', max_length=20)),
                ('voidfactor', models.CharField(blank=True, db_column='VoidFactor', max_length=10, null=True)),
                ('specialbetvalue', models.CharField(blank=True, db_column='SpecialBetValue', max_length=12, null=True)),
                ('status', models.SmallIntegerField(blank=True, db_column='Status', null=True)),
                ('createtime', models.DateTimeField(db_column='CreateTime')),
            ],
            options={
                'db_table': 'TB_Odds_Result',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbOddsspread',
            fields=[
                ('tid', models.AutoField(db_column='Tid', primary_key=True, serialize=False)),
                ('matchid', models.BigIntegerField(db_column='MatchID')),
                ('oddstypegroup', models.IntegerField(db_column='OddsTypeGroup')),
                ('spread', helpers.director.model_func.cus_fields.cus_decimal.CusDecimalField(db_column='Spread', decimal_places=2, max_digits=18)),
                ('createtime', models.DateTimeField(db_column='CreateTime')),
                ('createuser', models.CharField(db_column='CreateUser', max_length=20)),
                ('updatetime', models.DateTimeField(db_column='UpdateTime')),
                ('updateuser', models.CharField(db_column='UpdateUser', max_length=20)),
            ],
            options={
                'db_table': 'TB_OddsSpread',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbOddstypegroup',
            fields=[
                ('tid', models.IntegerField(db_column='TID', primary_key=True, serialize=False)),
                ('sportid', models.IntegerField(db_column='SportID')),
                ('oddstypegroup', models.IntegerField(db_column='OddsTypeGroup', unique=True)),
                ('oddstypenamezh', models.CharField(blank=True, db_column='OddsTypeNameZH', max_length=100, null=True)),
                ('sort', models.IntegerField(db_column='Sort')),
                ('enabled', models.IntegerField(db_column='Enabled')),
            ],
            options={
                'db_table': 'TB_OddsTypeGroup',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbOddstypes',
            fields=[
                ('oddstypesid', models.BigAutoField(db_column='OddsTypesId', primary_key=True, serialize=False)),
                ('sportid', models.IntegerField(db_column='SportID')),
                ('oddsid', models.BigIntegerField(db_column='OddsID', unique=True)),
                ('oddskind', models.IntegerField(db_column='OddsKind')),
                ('oddstypeid', models.IntegerField(db_column='OddsTypeID')),
                ('subtype', models.IntegerField(blank=True, db_column='Subtype', null=True)),
                ('oddstypename', models.CharField(db_column='OddsTypeName', max_length=50)),
                ('oddstypenamezh', models.CharField(db_column='OddsTypeNameZH', max_length=10)),
                ('oddsoutcome', models.CharField(db_column='OddsOutcome', max_length=20)),
                ('outcome', models.IntegerField(db_column='Outcome')),
                ('outcomedesc', models.CharField(db_column='OutcomeDesc', max_length=200)),
                ('status', models.IntegerField(db_column='Status')),
                ('sort', models.IntegerField(blank=True, db_column='Sort', null=True)),
                ('enabled', models.IntegerField(blank=True, db_column='Enabled', null=True)),
            ],
            options={
                'db_table': 'TB_OddsTypes',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbOutrightevent',
            fields=[
                ('tid', models.AutoField(db_column='Tid', primary_key=True, serialize=False)),
                ('sportid', models.IntegerField(db_column='SportID')),
                ('categoryid', models.IntegerField(db_column='CategoryID')),
                ('tournamentid', models.BigIntegerField(db_column='TournamentID')),
                ('eventid', models.IntegerField(db_column='EventID')),
                ('eventinfo', models.CharField(db_column='EventInfo', max_length=50)),
                ('eventdate', models.DateTimeField(db_column='EventDate')),
                ('eventenddate', models.DateTimeField(db_column='EventEndDate')),
                ('status', models.SmallIntegerField(db_column='Status')),
                ('createtime', models.DateTimeField(db_column='CreateTime')),
                ('updatetime', models.DateTimeField(db_column='UpdateTime')),
            ],
            options={
                'db_table': 'TB_OutRightEvent',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbParlayrules',
            fields=[
                ('parlayid', models.IntegerField(db_column='ParlayID', primary_key=True, serialize=False)),
                ('parlaycount', models.SmallIntegerField(db_column='ParlayCount')),
                ('stakecount', models.SmallIntegerField(db_column='StakeCount')),
                ('ticket1', models.SmallIntegerField(db_column='Ticket1')),
                ('ticket2', models.SmallIntegerField(db_column='Ticket2')),
                ('ticket3', models.SmallIntegerField(db_column='Ticket3')),
                ('ticket4', models.SmallIntegerField(db_column='Ticket4')),
                ('ticket5', models.SmallIntegerField(db_column='Ticket5')),
                ('ticket6', models.SmallIntegerField(db_column='Ticket6')),
                ('parlayname', models.CharField(db_column='ParlayName', max_length=10)),
            ],
            options={
                'db_table': 'TB_ParlayRules',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbPasswordResettoken',
            fields=[
                ('tid', models.AutoField(db_column='Tid', primary_key=True, serialize=False)),
                ('account', models.CharField(db_column='Account', max_length=20)),
                ('resettoken', models.CharField(db_column='ResetToken', max_length=36)),
                ('createtime', models.DateTimeField(db_column='CreateTime')),
                ('usetime', models.DateTimeField(blank=True, db_column='UseTime', null=True)),
            ],
            options={
                'db_table': 'TB_Password_ResetToken',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbPaymentChannels',
            fields=[
                ('channelid', models.IntegerField(db_column='ChannelID', primary_key=True, serialize=False)),
                ('channelname', models.CharField(db_column='ChannelName', max_length=20)),
                ('channeltype', models.CharField(blank=True, db_column='ChannelType', max_length=10, null=True)),
                ('status', models.SmallIntegerField(db_column='Status')),
                ('orderno', models.SmallIntegerField(blank=True, db_column='OrderNo', null=True)),
            ],
            options={
                'db_table': 'TB_Payment_Channels',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbPlayers',
            fields=[
                ('id', models.CharField(db_column='ID', max_length=50, primary_key=True, serialize=False)),
                ('superid', models.CharField(db_column='SuperID', max_length=50)),
                ('international', models.CharField(db_column='International', max_length=100)),
            ],
            options={
                'db_table': 'TB_Players',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbQa',
            fields=[
                ('qaid', models.AutoField(db_column='QAID', primary_key=True, serialize=False)),
                ('class_field', models.CharField(blank=True, db_column='Class', default=0, max_length=1)),
                ('mtype', models.IntegerField(db_column='MType', verbose_name='从属于')),
                ('type', models.IntegerField(db_column='Type')),
                ('priority', models.SmallIntegerField(blank=True, db_column='Priority', default=0)),
                ('title', models.CharField(db_column='Title', max_length=100)),
                ('description', models.CharField(db_column='Description', max_length=1500)),
                ('status', models.SmallIntegerField(choices=[(1, '启用'), (0, '离线')], db_column='Status')),
                ('updatetime', models.DateTimeField(auto_now=True, db_column='UpdateTime')),
                ('ver', models.IntegerField(blank=True, db_column='Ver', default=0)),
            ],
            options={
                'db_table': 'TB_QA',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbRcFilter',
            fields=[
                ('rc_rule_id', models.AutoField(db_column='RC_rule_id', primary_key=True, serialize=False)),
                ('rc_level', models.CharField(db_column='RC_Level', max_length=1, verbose_name='风控等级')),
                ('rc_rule', models.IntegerField(db_column='RC_rule', verbose_name='规则')),
                ('rc_rule_name', models.CharField(db_column='RC_rule_Name', max_length=30, verbose_name='风控等级')),
                ('rc_filter', helpers.director.model_func.cus_fields.cus_decimal.CusDecimalField(db_column='RC_filter', decimal_places=2, max_digits=18, verbose_name='风控条件')),
                ('rc_active', models.SmallIntegerField(db_column='RC_active', verbose_name='激活')),
                ('rc_days', models.IntegerField(db_column='RC_DAYS', verbose_name='天数')),
                ('description', models.CharField(blank=True, db_column='Description', max_length=50, null=True, verbose_name='描述')),
            ],
            options={
                'db_table': 'TB_RC_Filter',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbRcLevel',
            fields=[
                ('rc_level_id', models.AutoField(db_column='RC_Level_ID', primary_key=True, serialize=False, verbose_name='风控等级ID')),
                ('rc_level', models.CharField(db_column='RC_Level', max_length=1, verbose_name='风控等级')),
                ('rc_level_type', models.IntegerField(db_column='RC_Level_Type', verbose_name='风控等级类型')),
                ('rc_level_name', models.CharField(db_column='RC_Level_Name', max_length=20, verbose_name='风控等级名称')),
                ('rc_level_filter', helpers.director.model_func.cus_fields.cus_decimal.CusDecimalField(db_column='RC_Level_Filter', decimal_places=2, max_digits=18, verbose_name='风控条件')),
            ],
            options={
                'db_table': 'TB_RC_Level',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbRcUser',
            fields=[
                ('accountid', models.IntegerField(db_column='AccountID', primary_key=True, serialize=False, verbose_name='账号ID')),
                ('accounttype', models.SmallIntegerField(db_column='AccountType', verbose_name='账号类型')),
                ('account', models.CharField(db_column='Account', max_length=20, verbose_name='账号')),
                ('rc_level', models.CharField(db_column='RC_Level', max_length=1, verbose_name='风控等级')),
            ],
            options={
                'db_table': 'TB_RC_USER',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbReturnmessage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('spid', models.IntegerField(db_column='SPID')),
                ('language', models.CharField(db_column='Language', max_length=10)),
                ('code', models.CharField(db_column='Code', max_length=10)),
                ('message', models.CharField(db_column='Message', max_length=50)),
            ],
            options={
                'db_table': 'TB_ReturnMessage',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbSetting',
            fields=[
                ('tid', models.AutoField(db_column='Tid', primary_key=True, serialize=False)),
                ('settingname', models.CharField(db_column='settingName', max_length=20)),
                ('settingkey', models.IntegerField(db_column='settingKey')),
                ('settingvalue', models.CharField(db_column='settingValue', max_length=50)),
                ('settingorder', models.IntegerField(db_column='settingOrder')),
                ('settingtime', models.DateTimeField(db_column='settingTime')),
                ('memo', models.CharField(max_length=30)),
            ],
            options={
                'db_table': 'TB_Setting',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbSplist',
            fields=[
                ('spid', models.IntegerField(db_column='SPID', primary_key=True, serialize=False)),
                ('spname', models.CharField(db_column='SPName', max_length=40)),
                ('needtoken', models.SmallIntegerField(db_column='needToken')),
                ('iscache', models.SmallIntegerField(db_column='isCache')),
                ('dbname', models.CharField(db_column='DBName', max_length=20)),
                ('status', models.SmallIntegerField(db_column='Status')),
            ],
            options={
                'db_table': 'TB_SPList',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbSport',
            fields=[
                ('sportid', models.IntegerField(db_column='SportID', primary_key=True, serialize=False)),
                ('sportname', models.CharField(db_column='SportName', max_length=200)),
            ],
            options={
                'db_table': 'TB_Sport',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbSpreadingodds',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.CharField(db_column='Category', max_length=20)),
                ('spreading', models.SmallIntegerField(db_column='Spreading')),
                ('book', helpers.director.model_func.cus_fields.cus_decimal.CusDecimalField(db_column='Book', decimal_places=3, max_digits=18)),
                ('euro', helpers.director.model_func.cus_fields.cus_decimal.CusDecimalField(db_column='EURO', decimal_places=3, max_digits=18)),
                ('hk', helpers.director.model_func.cus_fields.cus_decimal.CusDecimalField(db_column='HK', decimal_places=3, max_digits=18)),
                ('malay', helpers.director.model_func.cus_fields.cus_decimal.CusDecimalField(db_column='MALAY', decimal_places=3, max_digits=18)),
            ],
            options={
                'db_table': 'TB_SpreadingOdds',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbStatuscode',
            fields=[
                ('statuscodeid', models.IntegerField(db_column='StatusCodeId')),
                ('sportid', models.SmallIntegerField(db_column='SportID')),
                ('statuscode', models.IntegerField(db_column='StatusCode', primary_key=True, serialize=False)),
                ('livestatus', models.SmallIntegerField(db_column='LiveStatus')),
                ('text', models.CharField(db_column='Text', max_length=20)),
            ],
            options={
                'db_table': 'TB_StatusCode',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbTicketmaster',
            fields=[
                ('ticketid', models.AutoField(db_column='TicketID', primary_key=True, serialize=False, verbose_name='注单ID')),
                ('account', models.CharField(db_column='Account', max_length=20, verbose_name='账号')),
                ('stakeamount', helpers.director.model_func.cus_fields.cus_decimal.CusDecimalField(db_column='StakeAmount', decimal_places=4, max_digits=18, verbose_name='单注金额')),
                ('betamount', helpers.director.model_func.cus_fields.cus_decimal.CusDecimalField(db_column='BetAmount', decimal_places=4, max_digits=18, verbose_name='注单金额')),
                ('parlayrule', models.IntegerField(db_column='ParlayRule', verbose_name='串关规则')),
                ('allowauto', models.SmallIntegerField(db_column='AllowAuto', verbose_name='允许自动')),
                ('status', models.IntegerField(db_column='Status', verbose_name='状态')),
                ('winbet', models.SmallIntegerField(db_column='WinBet', verbose_name='是否中注')),
                ('createtime', models.DateTimeField(db_column='CreateTime', verbose_name='创建时间')),
                ('betoutcome', helpers.director.model_func.cus_fields.cus_decimal.CusDecimalField(db_column='BetOutcome', decimal_places=4, max_digits=18, verbose_name='BetOutcome')),
                ('turnover', helpers.director.model_func.cus_fields.cus_decimal.CusDecimalField(db_column='Turnover', decimal_places=4, max_digits=18, verbose_name='流水')),
                ('bonuspa', helpers.director.model_func.cus_fields.cus_decimal.CusDecimalField(db_column='BonusPa', decimal_places=4, max_digits=18, verbose_name='反水比例')),
                ('bonus', helpers.director.model_func.cus_fields.cus_decimal.CusDecimalField(db_column='Bonus', decimal_places=4, max_digits=18, verbose_name='反水/红利')),
                ('rawdata', models.CharField(db_column='RawData', max_length=4000, verbose_name='原始数据')),
                ('settletime', models.DateTimeField(db_column='SettleTime', verbose_name='结算时间')),
                ('stakecount', models.IntegerField(db_column='StakeCount')),
                ('parlaycount', models.IntegerField(db_column='ParlayCount')),
                ('reststakecount', models.IntegerField(db_column='RestStakeCount')),
                ('orderid', models.BigIntegerField(db_column='OrderID', unique=True)),
                ('handicap', models.IntegerField(db_column='Handicap')),
                ('possibleturnover', helpers.director.model_func.cus_fields.cus_decimal.CusDecimalField(blank=True, db_column='PossibleTurnover', decimal_places=4, max_digits=18, null=True)),
            ],
            options={
                'db_table': 'TB_TicketMaster',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbTicketparlay',
            fields=[
                ('tid', models.AutoField(db_column='Tid', primary_key=True, serialize=False)),
                ('parlay1tid', models.BigIntegerField(db_column='Parlay1Tid', verbose_name='子注单ID1')),
                ('parlay2tid', models.BigIntegerField(db_column='Parlay2Tid', verbose_name='子注单ID2')),
                ('parlay3tid', models.BigIntegerField(db_column='Parlay3Tid', verbose_name='子注单ID3')),
                ('parlay4tid', models.BigIntegerField(db_column='Parlay4Tid', verbose_name='子注单ID4')),
                ('parlay5tid', models.BigIntegerField(db_column='Parlay5Tid', verbose_name='子注单ID5')),
                ('parlay6tid', models.BigIntegerField(db_column='Parlay6Tid', verbose_name='子注单ID6')),
                ('odds', helpers.director.model_func.cus_fields.cus_decimal.CusDecimalField(db_column='Odds', decimal_places=2, max_digits=18, verbose_name='赔率')),
                ('stakeamount', helpers.director.model_func.cus_fields.cus_decimal.CusDecimalField(db_column='StakeAmount', decimal_places=4, max_digits=18, verbose_name='每注金额')),
                ('betoutcome', helpers.director.model_func.cus_fields.cus_decimal.CusDecimalField(db_column='BetOutcome', decimal_places=4, max_digits=18, verbose_name='派彩金额')),
                ('winbet', models.SmallIntegerField(db_column='WinBet', verbose_name='中注')),
                ('turnover', helpers.director.model_func.cus_fields.cus_decimal.CusDecimalField(db_column='Turnover', decimal_places=4, max_digits=18, verbose_name='流水')),
                ('createtime', models.DateTimeField(db_column='CreateTime', verbose_name='建立时间')),
            ],
            options={
                'db_table': 'TB_TicketParlay',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbTickets',
            fields=[
                ('tid', models.AutoField(db_column='Tid', primary_key=True, serialize=False)),
                ('account', models.CharField(db_column='Account', max_length=20)),
                ('oddstid', models.IntegerField(db_column='OddsTid')),
                ('odds', helpers.director.model_func.cus_fields.cus_decimal.CusDecimalField(db_column='Odds', decimal_places=2, max_digits=18)),
                ('betamount', models.IntegerField(db_column='BetAmount')),
                ('status', models.SmallIntegerField(db_column='Status')),
                ('betoutcome', helpers.director.model_func.cus_fields.cus_decimal.CusDecimalField(db_column='BetOutcome', decimal_places=2, max_digits=18)),
                ('turnover', helpers.director.model_func.cus_fields.cus_decimal.CusDecimalField(db_column='Turnover', decimal_places=2, max_digits=18)),
                ('bonuspa', helpers.director.model_func.cus_fields.cus_decimal.CusDecimalField(db_column='BonusPa', decimal_places=2, max_digits=18)),
                ('bonus', helpers.director.model_func.cus_fields.cus_decimal.CusDecimalField(db_column='Bonus', decimal_places=2, max_digits=18)),
                ('rawdata', models.CharField(blank=True, db_column='RawData', max_length=500, null=True)),
                ('createtime', models.DateTimeField(db_column='CreateTime')),
                ('settletime', models.DateTimeField(blank=True, db_column='SettleTime', null=True)),
            ],
            options={
                'db_table': 'TB_Tickets',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbTicketstake',
            fields=[
                ('tid', models.AutoField(db_column='Tid', primary_key=True, serialize=False, verbose_name='序号')),
                ('stakeid', models.SmallIntegerField(db_column='StakeID')),
                ('dangeroustid', models.BigIntegerField(db_column='DangerousTid')),
                ('oddsid', models.BigIntegerField(db_column='OddsID')),
                ('specialbetvalue', models.CharField(db_column='SpecialBetValue', max_length=12, verbose_name='让分')),
                ('odds', helpers.director.model_func.cus_fields.cus_decimal.CusDecimalField(db_column='Odds', decimal_places=2, max_digits=18, verbose_name='赔率')),
                ('confirmodds', helpers.director.model_func.cus_fields.cus_decimal.CusDecimalField(db_column='ConfirmOdds', decimal_places=2, max_digits=18, verbose_name='确认赔率')),
                ('realodds', helpers.director.model_func.cus_fields.cus_decimal.CusDecimalField(db_column='RealOdds', decimal_places=2, max_digits=18, verbose_name='真实赔率')),
                ('oddsid_ori', models.BigIntegerField(db_column='OddsID_ori')),
                ('confirmoddsid_ori', models.BigIntegerField(db_column='ConfirmOddsID_ori', verbose_name='结算值')),
                ('voidfactor', models.CharField(db_column='VoidFactor', max_length=10)),
                ('status', models.IntegerField(db_column='Status', verbose_name='状态')),
                ('rawdata', models.CharField(db_column='RawData', max_length=3000)),
                ('createtime', models.DateTimeField(db_column='CreateTime', verbose_name='建立时间')),
                ('updatetime', models.DateTimeField(db_column='UpdateTime', verbose_name='更新时间')),
                ('confirmoddstid', models.BigIntegerField(db_column='ConfirmOddsTid')),
                ('oddskind', models.IntegerField(db_column='OddsKind')),
            ],
            options={
                'db_table': 'TB_TicketStake',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbTournament',
            fields=[
                ('tournamentid', models.IntegerField(db_column='TournamentID', primary_key=True, serialize=False)),
                ('tournamentname', models.CharField(db_column='TournamentName', max_length=200)),
                ('categoryid', models.IntegerField(blank=True, db_column='CategoryID', null=True)),
                ('createtime', models.DateTimeField(db_column='CreateTime')),
                ('uniquetournamentid', models.IntegerField(db_column='UniqueTournamentID')),
            ],
            options={
                'db_table': 'TB_Tournament',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbTournamentcup',
            fields=[
                ('tournamentid', models.IntegerField(db_column='TournamentID', primary_key=True, serialize=False)),
                ('tournamentname', models.CharField(db_column='TournamentName', max_length=200)),
                ('startdate', models.DateTimeField(db_column='StartDate')),
                ('enddate', models.DateTimeField(db_column='EndDate')),
                ('updatedate', models.DateTimeField(db_column='UpdateDate')),
            ],
            options={
                'db_table': 'TB_TournamentCup',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbTrans',
            fields=[
                ('tranid', models.CharField(db_column='TranID', max_length=20, primary_key=True, serialize=False)),
                ('account', models.CharField(db_column='Account', max_length=20, verbose_name='账号')),
                ('bankaccountname', models.CharField(db_column='BankAccountName', max_length=20)),
                ('bankcardtid', models.IntegerField(db_column='BankCardTid')),
                ('cashflow', models.SmallIntegerField(db_column='CashFlow')),
                ('amount', helpers.director.model_func.cus_fields.cus_decimal.CusDecimalField(db_column='Amount', decimal_places=2, max_digits=18, verbose_name='金额')),
                ('realamount', helpers.director.model_func.cus_fields.cus_decimal.CusDecimalField(db_column='RealAmount', decimal_places=2, max_digits=18, verbose_name='实际金额')),
                ('code', models.CharField(db_column='Code', max_length=10)),
                ('paymentdata', models.CharField(db_column='PaymentData', max_length=2000)),
                ('fee', helpers.director.model_func.cus_fields.cus_decimal.CusDecimalField(db_column='Fee', decimal_places=2, max_digits=18, verbose_name='手续费')),
                ('status', models.SmallIntegerField(db_column='Status', verbose_name='状态')),
                ('createtime', models.DateTimeField(db_column='CreateTime', verbose_name='建立时间')),
                ('exectime', models.DateTimeField(db_column='ExecTime', verbose_name='交易时间')),
                ('groupcode', models.CharField(db_column='GroupCode', max_length=10)),
            ],
            options={
                'db_table': 'TB_Trans',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbTransWithdraw',
            fields=[
                ('tranid', models.CharField(db_column='TranID', max_length=20, primary_key=True, serialize=False)),
                ('account', models.CharField(db_column='Account', max_length=20)),
                ('channelid', models.IntegerField(db_column='ChannelID')),
                ('bankaccountname', models.CharField(db_column='BankAccountName', max_length=20)),
                ('bankcardtid', models.IntegerField(db_column='BankCardTid')),
                ('cashflow', models.SmallIntegerField(db_column='CashFlow')),
                ('amount', helpers.director.model_func.cus_fields.cus_decimal.CusDecimalField(db_column='Amount', decimal_places=2, max_digits=18)),
                ('realamount', helpers.director.model_func.cus_fields.cus_decimal.CusDecimalField(db_column='RealAmount', decimal_places=2, max_digits=18)),
                ('code', models.CharField(db_column='Code', max_length=10)),
                ('paymentdata', models.CharField(db_column='PaymentData', max_length=2000)),
                ('fee', helpers.director.model_func.cus_fields.cus_decimal.CusDecimalField(db_column='Fee', decimal_places=2, max_digits=18)),
                ('status', models.SmallIntegerField(db_column='Status')),
                ('rc_memo', models.CharField(db_column='RC_Memo', max_length=500)),
                ('createtime', models.DateTimeField(db_column='CreateTime')),
                ('exectime', models.DateTimeField(db_column='ExecTime')),
            ],
            options={
                'db_table': 'TB_Trans_Withdraw',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbTurnoverMonthlyLog',
            fields=[
                ('tid', models.AutoField(db_column='Tid', primary_key=True, serialize=False)),
                ('logdate', models.DateTimeField(db_column='LogDate')),
                ('turnover', helpers.director.model_func.cus_fields.cus_decimal.CusDecimalField(db_column='Turnover', decimal_places=2, max_digits=18)),
                ('newlv', models.SmallIntegerField(db_column='newLV')),
                ('createtime', models.DateTimeField(db_column='CreateTime')),
            ],
            options={
                'db_table': 'TB_Turnover_Monthly_Log',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbTurnoverUselog',
            fields=[
                ('tid', models.AutoField(db_column='Tid', primary_key=True, serialize=False)),
                ('turnover', helpers.director.model_func.cus_fields.cus_decimal.CusDecimalField(db_column='Turnover', decimal_places=2, max_digits=18)),
                ('usetype', models.SmallIntegerField(db_column='UseType')),
                ('createtime', models.DateTimeField(db_column='CreateTime')),
                ('memo', models.CharField(db_column='Memo', max_length=20)),
                ('ticketid', models.CharField(db_column='TicketID', max_length=20)),
            ],
            options={
                'db_table': 'TB_Turnover_UseLog',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbVerifylog',
            fields=[
                ('tid', models.AutoField(db_column='Tid', primary_key=True, serialize=False)),
                ('verifytype', models.SmallIntegerField(db_column='VerifyType')),
                ('verifydata', models.CharField(db_column='VerifyData', max_length=200)),
                ('createtime', models.DateTimeField(db_column='CreateTime')),
                ('status', models.SmallIntegerField(db_column='Status')),
                ('updatetime', models.DateTimeField(db_column='UpdateTime')),
            ],
            options={
                'db_table': 'TB_VerifyLog',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbVipRescueLog',
            fields=[
                ('tid', models.AutoField(db_column='Tid', primary_key=True, serialize=False)),
                ('viplv', models.SmallIntegerField(db_column='VIPLv')),
                ('netprofit', helpers.director.model_func.cus_fields.cus_decimal.CusDecimalField(db_column='NetProfit', decimal_places=2, max_digits=18)),
                ('returnbonus', helpers.director.model_func.cus_fields.cus_decimal.CusDecimalField(db_column='ReturnBonus', decimal_places=2, max_digits=18)),
                ('status', models.SmallIntegerField(db_column='Status')),
                ('createtime', models.DateTimeField(db_column='CreateTime')),
            ],
            options={
                'db_table': 'TB_Vip_Rescue_Log',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbWithdrawlimitlog',
            fields=[
                ('tid', models.AutoField(db_column='Tid', primary_key=True, serialize=False)),
                ('account', models.CharField(db_column='Account', max_length=20)),
                ('categoryid', models.IntegerField(db_column='CategoryID')),
                ('cashflow', models.SmallIntegerField(db_column='CashFlow')),
                ('beforeamount', helpers.director.model_func.cus_fields.cus_decimal.CusDecimalField(db_column='BeforeAmount', decimal_places=4, max_digits=18)),
                ('amount', helpers.director.model_func.cus_fields.cus_decimal.CusDecimalField(db_column='Amount', decimal_places=4, max_digits=18)),
                ('afteramount', helpers.director.model_func.cus_fields.cus_decimal.CusDecimalField(db_column='AfterAmount', decimal_places=4, max_digits=18)),
                ('memo', models.CharField(blank=True, db_column='Memo', max_length=50, null=True)),
                ('createtime', models.DateTimeField(db_column='CreateTime')),
                ('creater', models.CharField(blank=True, db_column='Creater', max_length=20, null=True)),
            ],
            options={
                'db_table': 'TB_WithdrawLimitLog',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Whiteiplist',
            fields=[
                ('whiteiplistid', models.AutoField(db_column='WhiteIpListID', primary_key=True, serialize=False, verbose_name='WhiteIpListID')),
                ('ip', models.CharField(db_column='Ip', max_length=16)),
                ('remark', models.CharField(db_column='Remark', max_length=200, verbose_name='备注')),
                ('iswork', models.BooleanField(db_column='IsWork', verbose_name='是否有效')),
                ('itype', models.IntegerField(db_column='IType')),
            ],
            options={
                'db_table': 'WhiteIpList',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Whiteuserlist',
            fields=[
                ('whiteuserlistid', models.AutoField(db_column='WhiteUserListID', primary_key=True, serialize=False, verbose_name='白名单ID')),
                ('username', models.CharField(blank=True, db_column='UserName', max_length=50, null=True, verbose_name='用户名')),
                ('itype', models.IntegerField(blank=True, db_column='Itype', null=True, verbose_name='Itype')),
                ('memo', models.CharField(blank=True, db_column='Memo', max_length=100, null=True, verbose_name='备注')),
                ('addtime', models.DateTimeField(blank=True, db_column='AddTime', null=True, verbose_name='添加时间')),
                ('iswork', models.BooleanField(db_column='IsWork', verbose_name='是否有效')),
            ],
            options={
                'db_table': 'WhiteUserList',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbWithdrawlimit',
            fields=[
                ('account', models.CharField(db_column='Account', max_length=20)),
                ('amount', helpers.director.model_func.cus_fields.cus_decimal.CusDecimalField(db_column='Amount', decimal_places=4, max_digits=18, verbose_name='提款限额')),
                ('accountid', models.ForeignKey(db_column='AccountID', db_constraint=False, on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='maindb.TbAccount')),
            ],
            options={
                'db_table': 'TB_WithdrawLimit',
                'managed': False,
            },
        ),
    ]
